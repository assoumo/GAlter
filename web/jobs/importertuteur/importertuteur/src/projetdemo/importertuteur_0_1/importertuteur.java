// ============================================================================
//
// Copyright (c) 2006-2013, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package projetdemo.importertuteur_0_1;

import routines.Mathematical;
import routines.DataOperation;
import routines.Relational;
import routines.TalendDate;
import routines.TalendDataGenerator;
import routines.Numeric;
import routines.TalendString;
import routines.StringHandling;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;

@SuppressWarnings("unused")
/**
 * Job: importertuteur Purpose: <br>
 * Description:  <br>
 * @author test@talend.com
 * @version 5.5.2.20150128_1740
 * @status 
 */
public class importertuteur implements TalendJob {

	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}

	private final static String defaultCharset = java.nio.charset.Charset
			.defaultCharset().name();

	private final static String utf8Charset = "UTF-8";

	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();

	// create application properties with default
	public class ContextProperties extends java.util.Properties {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties) {
			super(properties);
		}

		public ContextProperties() {
			super();
		}

		public void synchronizeContext() {

			if (source != null) {

				this.setProperty("source", source.toString());

			}

		}

		public String source;

		public String getSource() {
			return this.source;
		}
	}

	private ContextProperties context = new ContextProperties();

	public ContextProperties getContext() {
		return this.context;
	}

	private final String jobVersion = "0.1";
	private final String jobName = "importertuteur";
	private final String projectName = "PROJETDEMO";
	public Integer errorCode = null;
	private String currentComponent = "";

	private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();

	private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
	public final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();

	public boolean isExportedAsOSGI = false;

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";

	public void setDataSources(
			java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources
				.entrySet()) {
			talendDataSources.put(
					dataSourceEntry.getKey(),
					new routines.system.TalendDataSource(dataSourceEntry
							.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
	}

	private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
	private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(
			new java.io.BufferedOutputStream(baos));

	public String getExceptionStackTrace() {
		if ("failure".equals(this.getStatus())) {
			errorMessagePS.flush();
			return baos.toString();
		}
		return null;
	}

	private java.lang.Exception exception = null;

	public java.lang.Exception getException() {
		if ("failure".equals(this.getStatus())) {
			return this.exception;
		}
		return null;
	}

	private class TalendException extends java.lang.Exception {

		private static final long serialVersionUID = 1L;

		private java.util.Map<String, Object> globalMap = null;
		private java.lang.Exception e = null;
		private String currentComponent = null;
		private String virtualComponentName = null;

		public void setVirtualComponentName(String virtualComponentName) {
			this.virtualComponentName = virtualComponentName;
		}

		private TalendException(java.lang.Exception e, String errorComponent,
				final java.util.Map<String, Object> globalMap) {
			this.currentComponent = errorComponent;
			this.globalMap = globalMap;
			this.e = e;
		}

		public java.lang.Exception getException() {
			return this.e;
		}

		public String getCurrentComponent() {
			return this.currentComponent;
		}

		public String getExceptionCauseMessage(java.lang.Exception e) {
			Throwable cause = e;
			String message = null;
			int i = 10;
			while (null != cause && 0 < i--) {
				message = cause.getMessage();
				if (null == message) {
					cause = cause.getCause();
				} else {
					break;
				}
			}
			if (null == message) {
				message = e.getClass().getName();
			}
			return message;
		}

		@Override
		public void printStackTrace() {
			if (!(e instanceof TalendException || e instanceof TDieException)) {
				if (virtualComponentName != null
						&& currentComponent.indexOf(virtualComponentName + "_") == 0) {
					globalMap.put(virtualComponentName + "_ERROR_MESSAGE",
							getExceptionCauseMessage(e));
				}
				globalMap.put(currentComponent + "_ERROR_MESSAGE",
						getExceptionCauseMessage(e));
				System.err
						.println("Exception in component " + currentComponent);
			}
			if (!(e instanceof TDieException)) {
				if (e instanceof TalendException) {
					e.printStackTrace();
				} else {
					e.printStackTrace();
					e.printStackTrace(errorMessagePS);
					importertuteur.this.exception = e;
				}
			}
			if (!(e instanceof TalendException)) {
				try {
					for (java.lang.reflect.Method m : this.getClass()
							.getEnclosingClass().getMethods()) {
						if (m.getName().compareTo(currentComponent + "_error") == 0) {
							m.invoke(importertuteur.this, new Object[] { e,
									currentComponent, globalMap });
							break;
						}
					}

					if (!(e instanceof TDieException)) {
					}
				} catch (java.lang.SecurityException e) {
					this.e.printStackTrace();
				} catch (java.lang.IllegalArgumentException e) {
					this.e.printStackTrace();
				} catch (java.lang.IllegalAccessException e) {
					this.e.printStackTrace();
				} catch (java.lang.reflect.InvocationTargetException e) {
					this.e.printStackTrace();
				}
			}
		}
	}

	public void tFileInputExcel_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputExcel_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputExcel_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMysqlOutput_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputExcel_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputExcel_2_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputExcel_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_2_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputExcel_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMysqlOutput_2_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputExcel_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMysqlInput_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tMysqlInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_row3_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tMysqlInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputExcel_1_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputExcel_2_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tMysqlInput_1_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public static class userStruct implements
			routines.system.IPersistableRow<userStruct> {
		final static byte[] commonByteArrayLock_PROJETDEMO_importertuteur = new byte[0];
		static byte[] commonByteArray_PROJETDEMO_importertuteur = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public int id;

		public int getId() {
			return this.id;
		}

		public String username;

		public String getUsername() {
			return this.username;
		}

		public String username_canonical;

		public String getUsername_canonical() {
			return this.username_canonical;
		}

		public String email;

		public String getEmail() {
			return this.email;
		}

		public String email_canonical;

		public String getEmail_canonical() {
			return this.email_canonical;
		}

		public int enabled;

		public int getEnabled() {
			return this.enabled;
		}

		public String salt;

		public String getSalt() {
			return this.salt;
		}

		public String password;

		public String getPassword() {
			return this.password;
		}

		public java.util.Date last_login;

		public java.util.Date getLast_login() {
			return this.last_login;
		}

		public boolean locked;

		public boolean getLocked() {
			return this.locked;
		}

		public boolean expired;

		public boolean getExpired() {
			return this.expired;
		}

		public java.util.Date expires_at;

		public java.util.Date getExpires_at() {
			return this.expires_at;
		}

		public String confirmation_token;

		public String getConfirmation_token() {
			return this.confirmation_token;
		}

		public java.util.Date password_requested_at;

		public java.util.Date getPassword_requested_at() {
			return this.password_requested_at;
		}

		public String roles;

		public String getRoles() {
			return this.roles;
		}

		public boolean credentials_expired;

		public boolean getCredentials_expired() {
			return this.credentials_expired;
		}

		public java.util.Date credentials_expire_at;

		public java.util.Date getCredentials_expire_at() {
			return this.credentials_expire_at;
		}

		public String type;

		public String getType() {
			return this.type;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.id;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final userStruct other = (userStruct) obj;

			if (this.id != other.id)
				return false;

			return true;
		}

		public void copyDataTo(userStruct other) {

			other.id = this.id;
			other.username = this.username;
			other.username_canonical = this.username_canonical;
			other.email = this.email;
			other.email_canonical = this.email_canonical;
			other.enabled = this.enabled;
			other.salt = this.salt;
			other.password = this.password;
			other.last_login = this.last_login;
			other.locked = this.locked;
			other.expired = this.expired;
			other.expires_at = this.expires_at;
			other.confirmation_token = this.confirmation_token;
			other.password_requested_at = this.password_requested_at;
			other.roles = this.roles;
			other.credentials_expired = this.credentials_expired;
			other.credentials_expire_at = this.credentials_expire_at;
			other.type = this.type;

		}

		public void copyKeysDataTo(userStruct other) {

			other.id = this.id;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_PROJETDEMO_importertuteur.length) {
					if (length < 1024
							&& commonByteArray_PROJETDEMO_importertuteur.length == 0) {
						commonByteArray_PROJETDEMO_importertuteur = new byte[1024];
					} else {
						commonByteArray_PROJETDEMO_importertuteur = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_PROJETDEMO_importertuteur, 0,
						length);
				strReturn = new String(
						commonByteArray_PROJETDEMO_importertuteur, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_PROJETDEMO_importertuteur) {

				try {

					int length = 0;

					this.id = dis.readInt();

					this.username = readString(dis);

					this.username_canonical = readString(dis);

					this.email = readString(dis);

					this.email_canonical = readString(dis);

					this.enabled = dis.readInt();

					this.salt = readString(dis);

					this.password = readString(dis);

					this.last_login = readDate(dis);

					this.locked = dis.readBoolean();

					this.expired = dis.readBoolean();

					this.expires_at = readDate(dis);

					this.confirmation_token = readString(dis);

					this.password_requested_at = readDate(dis);

					this.roles = readString(dis);

					this.credentials_expired = dis.readBoolean();

					this.credentials_expire_at = readDate(dis);

					this.type = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.id);

				// String

				writeString(this.username, dos);

				// String

				writeString(this.username_canonical, dos);

				// String

				writeString(this.email, dos);

				// String

				writeString(this.email_canonical, dos);

				// int

				dos.writeInt(this.enabled);

				// String

				writeString(this.salt, dos);

				// String

				writeString(this.password, dos);

				// java.util.Date

				writeDate(this.last_login, dos);

				// boolean

				dos.writeBoolean(this.locked);

				// boolean

				dos.writeBoolean(this.expired);

				// java.util.Date

				writeDate(this.expires_at, dos);

				// String

				writeString(this.confirmation_token, dos);

				// java.util.Date

				writeDate(this.password_requested_at, dos);

				// String

				writeString(this.roles, dos);

				// boolean

				dos.writeBoolean(this.credentials_expired);

				// java.util.Date

				writeDate(this.credentials_expire_at, dos);

				// String

				writeString(this.type, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("id=" + String.valueOf(id));
			sb.append(",username=" + username);
			sb.append(",username_canonical=" + username_canonical);
			sb.append(",email=" + email);
			sb.append(",email_canonical=" + email_canonical);
			sb.append(",enabled=" + String.valueOf(enabled));
			sb.append(",salt=" + salt);
			sb.append(",password=" + password);
			sb.append(",last_login=" + String.valueOf(last_login));
			sb.append(",locked=" + String.valueOf(locked));
			sb.append(",expired=" + String.valueOf(expired));
			sb.append(",expires_at=" + String.valueOf(expires_at));
			sb.append(",confirmation_token=" + confirmation_token);
			sb.append(",password_requested_at="
					+ String.valueOf(password_requested_at));
			sb.append(",roles=" + roles);
			sb.append(",credentials_expired="
					+ String.valueOf(credentials_expired));
			sb.append(",credentials_expire_at="
					+ String.valueOf(credentials_expire_at));
			sb.append(",type=" + type);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(userStruct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.id, other.id);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row1Struct implements
			routines.system.IPersistableRow<row1Struct> {
		final static byte[] commonByteArrayLock_PROJETDEMO_importertuteur = new byte[0];
		static byte[] commonByteArray_PROJETDEMO_importertuteur = new byte[0];

		public String numeroetudiant;

		public String getNumeroetudiant() {
			return this.numeroetudiant;
		}

		public String email;

		public String getEmail() {
			return this.email;
		}

		public String nom;

		public String getNom() {
			return this.nom;
		}

		public String prenom;

		public String getPrenom() {
			return this.prenom;
		}

		public String telephone;

		public String getTelephone() {
			return this.telephone;
		}

		public String adresse;

		public String getAdresse() {
			return this.adresse;
		}

		public String organisation;

		public String getOrganisation() {
			return this.organisation;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_PROJETDEMO_importertuteur.length) {
					if (length < 1024
							&& commonByteArray_PROJETDEMO_importertuteur.length == 0) {
						commonByteArray_PROJETDEMO_importertuteur = new byte[1024];
					} else {
						commonByteArray_PROJETDEMO_importertuteur = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_PROJETDEMO_importertuteur, 0,
						length);
				strReturn = new String(
						commonByteArray_PROJETDEMO_importertuteur, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_PROJETDEMO_importertuteur) {

				try {

					int length = 0;

					this.numeroetudiant = readString(dis);

					this.email = readString(dis);

					this.nom = readString(dis);

					this.prenom = readString(dis);

					this.telephone = readString(dis);

					this.adresse = readString(dis);

					this.organisation = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.numeroetudiant, dos);

				// String

				writeString(this.email, dos);

				// String

				writeString(this.nom, dos);

				// String

				writeString(this.prenom, dos);

				// String

				writeString(this.telephone, dos);

				// String

				writeString(this.adresse, dos);

				// String

				writeString(this.organisation, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("numeroetudiant=" + numeroetudiant);
			sb.append(",email=" + email);
			sb.append(",nom=" + nom);
			sb.append(",prenom=" + prenom);
			sb.append(",telephone=" + telephone);
			sb.append(",adresse=" + adresse);
			sb.append(",organisation=" + organisation);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row1Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputExcel_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileInputExcel_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row1Struct row1 = new row1Struct();
				userStruct user = new userStruct();

				/**
				 * [tMysqlOutput_1 begin ] start
				 */

				ok_Hash.put("tMysqlOutput_1", false);
				start_Hash.put("tMysqlOutput_1", System.currentTimeMillis());

				currentComponent = "tMysqlOutput_1";

				int tos_count_tMysqlOutput_1 = 0;

				int updateKeyCount_tMysqlOutput_1 = 1;
				if (updateKeyCount_tMysqlOutput_1 < 1) {

					throw new RuntimeException(
							"For update, Schema must have a key");
				}

				int nb_line_tMysqlOutput_1 = 0;
				int nb_line_update_tMysqlOutput_1 = 0;
				int nb_line_inserted_tMysqlOutput_1 = 0;
				int nb_line_deleted_tMysqlOutput_1 = 0;
				int nb_line_rejected_tMysqlOutput_1 = 0;

				int deletedCount_tMysqlOutput_1 = 0;
				int updatedCount_tMysqlOutput_1 = 0;
				int insertedCount_tMysqlOutput_1 = 0;

				int rejectedCount_tMysqlOutput_1 = 0;

				String tableName_tMysqlOutput_1 = "user";
				boolean whetherReject_tMysqlOutput_1 = false;

				java.util.Calendar calendar_tMysqlOutput_1 = java.util.Calendar
						.getInstance();
				calendar_tMysqlOutput_1.set(1, 0, 1, 0, 0, 0);
				long year1_tMysqlOutput_1 = calendar_tMysqlOutput_1.getTime()
						.getTime();
				calendar_tMysqlOutput_1.set(10000, 0, 1, 0, 0, 0);
				long year10000_tMysqlOutput_1 = calendar_tMysqlOutput_1
						.getTime().getTime();
				long date_tMysqlOutput_1;

				java.sql.Connection conn_tMysqlOutput_1 = null;
				String dbProperties_tMysqlOutput_1 = "noDatetimeStringSync=true";
				String url_tMysqlOutput_1 = null;
				if (dbProperties_tMysqlOutput_1 == null
						|| dbProperties_tMysqlOutput_1.trim().length() == 0) {
					url_tMysqlOutput_1 = "jdbc:mysql://" + "localhost" + ":"
							+ "8889" + "/" + "galter" + "?"
							+ "rewriteBatchedStatements=true";
				} else {
					String properties_tMysqlOutput_1 = "noDatetimeStringSync=true";
					if (!properties_tMysqlOutput_1
							.contains("rewriteBatchedStatements")) {
						properties_tMysqlOutput_1 += "&rewriteBatchedStatements=true";
					}

					url_tMysqlOutput_1 = "jdbc:mysql://" + "localhost" + ":"
							+ "8889" + "/" + "galter" + "?"
							+ properties_tMysqlOutput_1;
				}
				String dbUser_tMysqlOutput_1 = "root";

				final String decryptedPassword_tMysqlOutput_1 = routines.system.PasswordEncryptUtil
						.decryptPassword("7a440551249af37a");

				String dbPwd_tMysqlOutput_1 = decryptedPassword_tMysqlOutput_1;

				java.lang.Class.forName("org.gjt.mm.mysql.Driver");

				conn_tMysqlOutput_1 = java.sql.DriverManager.getConnection(
						url_tMysqlOutput_1, dbUser_tMysqlOutput_1,
						dbPwd_tMysqlOutput_1);

				resourceMap.put("conn_tMysqlOutput_1", conn_tMysqlOutput_1);
				conn_tMysqlOutput_1.setAutoCommit(false);
				int commitEvery_tMysqlOutput_1 = 10000;
				int commitCounter_tMysqlOutput_1 = 0;

				int count_tMysqlOutput_1 = 0;

				java.sql.PreparedStatement pstmt_tMysqlOutput_1 = conn_tMysqlOutput_1
						.prepareStatement("SELECT COUNT(1) FROM `" + "user"
								+ "` WHERE `id` = ?");
				String insert_tMysqlOutput_1 = "INSERT INTO `"
						+ "user"
						+ "` (`id`,`username`,`username_canonical`,`email`,`email_canonical`,`enabled`,`salt`,`password`,`last_login`,`locked`,`expired`,`expires_at`,`confirmation_token`,`password_requested_at`,`roles`,`credentials_expired`,`credentials_expire_at`,`type`) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";

				java.sql.PreparedStatement pstmtInsert_tMysqlOutput_1 = conn_tMysqlOutput_1
						.prepareStatement(insert_tMysqlOutput_1);
				String update_tMysqlOutput_1 = "UPDATE `"
						+ "user"
						+ "` SET `username` = ?,`username_canonical` = ?,`email` = ?,`email_canonical` = ?,`enabled` = ?,`salt` = ?,`password` = ?,`last_login` = ?,`locked` = ?,`expired` = ?,`expires_at` = ?,`confirmation_token` = ?,`password_requested_at` = ?,`roles` = ?,`credentials_expired` = ?,`credentials_expire_at` = ?,`type` = ? WHERE `id` = ?";

				java.sql.PreparedStatement pstmtUpdate_tMysqlOutput_1 = conn_tMysqlOutput_1
						.prepareStatement(update_tMysqlOutput_1);

				/**
				 * [tMysqlOutput_1 begin ] stop
				 */

				/**
				 * [tMap_1 begin ] start
				 */

				ok_Hash.put("tMap_1", false);
				start_Hash.put("tMap_1", System.currentTimeMillis());

				currentComponent = "tMap_1";

				int tos_count_tMap_1 = 0;

				// ###############################
				// # Lookup's keys initialization
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_1__Struct {
				}
				Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				userStruct user_tmp = new userStruct();
				// ###############################

				/**
				 * [tMap_1 begin ] stop
				 */

				/**
				 * [tFileInputExcel_1 begin ] start
				 */

				ok_Hash.put("tFileInputExcel_1", false);
				start_Hash.put("tFileInputExcel_1", System.currentTimeMillis());

				currentComponent = "tFileInputExcel_1";

				int tos_count_tFileInputExcel_1 = 0;

				org.apache.log4j.Logger logger_tFileInputExcel_1 = org.apache.log4j.Logger
						.getLogger("org.openxml4j.opc");
				logger_tFileInputExcel_1.setLevel(org.apache.log4j.Level.WARN);
				class RegexUtil_tFileInputExcel_1 {

					public java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> getSheets(
							org.apache.poi.xssf.usermodel.XSSFWorkbook workbook,
							String oneSheetName, boolean useRegex) {

						java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> list = new java.util.ArrayList<org.apache.poi.xssf.usermodel.XSSFSheet>();

						if (useRegex) {// this part process the regex issue

							java.util.regex.Pattern pattern = java.util.regex.Pattern
									.compile(oneSheetName);
							for (org.apache.poi.xssf.usermodel.XSSFSheet sheet : workbook) {
								String sheetName = sheet.getSheetName();
								java.util.regex.Matcher matcher = pattern
										.matcher(sheetName);
								if (matcher.matches()) {
									if (sheet != null) {
										list.add(sheet);
									}
								}
							}

						} else {
							org.apache.poi.xssf.usermodel.XSSFSheet sheet = workbook
									.getSheet(oneSheetName);
							if (sheet != null) {
								list.add(sheet);
							}

						}

						return list;
					}

					public java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> getSheets(
							org.apache.poi.xssf.usermodel.XSSFWorkbook workbook,
							int index, boolean useRegex) {
						java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> list = new java.util.ArrayList<org.apache.poi.xssf.usermodel.XSSFSheet>();
						org.apache.poi.xssf.usermodel.XSSFSheet sheet = workbook
								.getSheetAt(index);
						if (sheet != null) {
							list.add(sheet);
						}
						return list;
					}

				}
				RegexUtil_tFileInputExcel_1 regexUtil_tFileInputExcel_1 = new RegexUtil_tFileInputExcel_1();

				Object source_tFileInputExcel_1 = context.source;
				org.apache.poi.xssf.usermodel.XSSFWorkbook workbook_tFileInputExcel_1 = null;

				if (source_tFileInputExcel_1 instanceof String) {
					workbook_tFileInputExcel_1 = new org.apache.poi.xssf.usermodel.XSSFWorkbook(
							(String) source_tFileInputExcel_1);
				} else if (source_tFileInputExcel_1 instanceof java.io.InputStream) {
					workbook_tFileInputExcel_1 = new org.apache.poi.xssf.usermodel.XSSFWorkbook(
							(java.io.InputStream) source_tFileInputExcel_1);
				} else {
					workbook_tFileInputExcel_1 = null;

					throw new java.lang.Exception(
							"The data source should be specified as Inputstream or File Path!");
				}
				try {

					java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> sheetList_tFileInputExcel_1 = new java.util.ArrayList<org.apache.poi.xssf.usermodel.XSSFSheet>();
					for (org.apache.poi.xssf.usermodel.XSSFSheet sheet_tFileInputExcel_1 : workbook_tFileInputExcel_1) {
						sheetList_tFileInputExcel_1
								.add(sheet_tFileInputExcel_1);
					}
					if (sheetList_tFileInputExcel_1.size() <= 0) {

						throw new RuntimeException("Special sheets not exist!");
					}

					java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> sheetList_FilterNull_tFileInputExcel_1 = new java.util.ArrayList<org.apache.poi.xssf.usermodel.XSSFSheet>();
					for (org.apache.poi.xssf.usermodel.XSSFSheet sheet_FilterNull_tFileInputExcel_1 : sheetList_tFileInputExcel_1) {
						if (sheet_FilterNull_tFileInputExcel_1 != null
								&& sheetList_FilterNull_tFileInputExcel_1
										.iterator() != null
								&& sheet_FilterNull_tFileInputExcel_1
										.iterator().hasNext()) {
							sheetList_FilterNull_tFileInputExcel_1
									.add(sheet_FilterNull_tFileInputExcel_1);
						}
					}
					sheetList_tFileInputExcel_1 = sheetList_FilterNull_tFileInputExcel_1;
					if (sheetList_tFileInputExcel_1.size() > 0) {
						int nb_line_tFileInputExcel_1 = 0;

						int begin_line_tFileInputExcel_1 = 0;

						int footer_input_tFileInputExcel_1 = 0;

						int end_line_tFileInputExcel_1 = 0;
						for (org.apache.poi.xssf.usermodel.XSSFSheet sheet_tFileInputExcel_1 : sheetList_tFileInputExcel_1) {
							end_line_tFileInputExcel_1 += (sheet_tFileInputExcel_1
									.getLastRowNum() + 1);
						}
						end_line_tFileInputExcel_1 -= footer_input_tFileInputExcel_1;
						int limit_tFileInputExcel_1 = -1;
						int start_column_tFileInputExcel_1 = 1 - 1;
						int end_column_tFileInputExcel_1 = -1;

						org.apache.poi.xssf.usermodel.XSSFRow row_tFileInputExcel_1 = null;
						org.apache.poi.xssf.usermodel.XSSFSheet sheet_tFileInputExcel_1 = sheetList_tFileInputExcel_1
								.get(0);
						int rowCount_tFileInputExcel_1 = 0;
						int sheetIndex_tFileInputExcel_1 = 0;
						int currentRows_tFileInputExcel_1 = (sheetList_tFileInputExcel_1
								.get(0).getLastRowNum() + 1);

						// for the number format
						java.text.DecimalFormat df_tFileInputExcel_1 = new java.text.DecimalFormat(
								"#.####################################");
						char decimalChar_tFileInputExcel_1 = df_tFileInputExcel_1
								.getDecimalFormatSymbols()
								.getDecimalSeparator();

						for (int i_tFileInputExcel_1 = begin_line_tFileInputExcel_1; i_tFileInputExcel_1 < end_line_tFileInputExcel_1; i_tFileInputExcel_1++) {

							int emptyColumnCount_tFileInputExcel_1 = 0;

							if (limit_tFileInputExcel_1 != -1
									&& nb_line_tFileInputExcel_1 >= limit_tFileInputExcel_1) {
								break;
							}

							while (i_tFileInputExcel_1 >= rowCount_tFileInputExcel_1
									+ currentRows_tFileInputExcel_1) {
								rowCount_tFileInputExcel_1 += currentRows_tFileInputExcel_1;
								sheet_tFileInputExcel_1 = sheetList_tFileInputExcel_1
										.get(++sheetIndex_tFileInputExcel_1);
								currentRows_tFileInputExcel_1 = (sheet_tFileInputExcel_1
										.getLastRowNum() + 1);
							}
							globalMap.put("tFileInputExcel_1_CURRENT_SHEET",
									sheet_tFileInputExcel_1.getSheetName());
							if (rowCount_tFileInputExcel_1 <= i_tFileInputExcel_1) {
								row_tFileInputExcel_1 = sheet_tFileInputExcel_1
										.getRow(i_tFileInputExcel_1
												- rowCount_tFileInputExcel_1);
							}
							row1 = null;
							String[] temp_row_tFileInputExcel_1 = new String[7];
							int excel_end_column_tFileInputExcel_1;
							if (row_tFileInputExcel_1 == null) {
								excel_end_column_tFileInputExcel_1 = 0;
							} else {
								excel_end_column_tFileInputExcel_1 = row_tFileInputExcel_1
										.getLastCellNum();
							}
							int actual_end_column_tFileInputExcel_1;
							if (end_column_tFileInputExcel_1 == -1) {
								actual_end_column_tFileInputExcel_1 = excel_end_column_tFileInputExcel_1;
							} else {
								actual_end_column_tFileInputExcel_1 = end_column_tFileInputExcel_1 > excel_end_column_tFileInputExcel_1 ? excel_end_column_tFileInputExcel_1
										: end_column_tFileInputExcel_1;
							}
							org.apache.poi.ss.formula.eval.NumberEval ne_tFileInputExcel_1 = null;
							for (int i = 0; i < 7; i++) {
								if (i + start_column_tFileInputExcel_1 < actual_end_column_tFileInputExcel_1) {
									org.apache.poi.ss.usermodel.Cell cell_tFileInputExcel_1 = row_tFileInputExcel_1
											.getCell(i
													+ start_column_tFileInputExcel_1);
									if (cell_tFileInputExcel_1 != null) {
										switch (cell_tFileInputExcel_1
												.getCellType()) {
										case org.apache.poi.ss.usermodel.Cell.CELL_TYPE_STRING:
											temp_row_tFileInputExcel_1[i] = cell_tFileInputExcel_1
													.getRichStringCellValue()
													.getString();
											break;
										case org.apache.poi.ss.usermodel.Cell.CELL_TYPE_NUMERIC:
											if (org.apache.poi.ss.usermodel.DateUtil
													.isCellDateFormatted(cell_tFileInputExcel_1)) {
												temp_row_tFileInputExcel_1[i] = cell_tFileInputExcel_1
														.getDateCellValue()
														.toString();
											} else {
												temp_row_tFileInputExcel_1[i] = df_tFileInputExcel_1
														.format(cell_tFileInputExcel_1
																.getNumericCellValue());
											}
											break;
										case org.apache.poi.ss.usermodel.Cell.CELL_TYPE_BOOLEAN:
											temp_row_tFileInputExcel_1[i] = String
													.valueOf(cell_tFileInputExcel_1
															.getBooleanCellValue());
											break;
										case org.apache.poi.ss.usermodel.Cell.CELL_TYPE_FORMULA:
											switch (cell_tFileInputExcel_1
													.getCachedFormulaResultType()) {
											case org.apache.poi.ss.usermodel.Cell.CELL_TYPE_STRING:
												temp_row_tFileInputExcel_1[i] = cell_tFileInputExcel_1
														.getRichStringCellValue()
														.getString();
												break;
											case org.apache.poi.ss.usermodel.Cell.CELL_TYPE_NUMERIC:
												if (org.apache.poi.ss.usermodel.DateUtil
														.isCellDateFormatted(cell_tFileInputExcel_1)) {
													temp_row_tFileInputExcel_1[i] = cell_tFileInputExcel_1
															.getDateCellValue()
															.toString();
												} else {
													ne_tFileInputExcel_1 = new org.apache.poi.ss.formula.eval.NumberEval(
															cell_tFileInputExcel_1
																	.getNumericCellValue());
													temp_row_tFileInputExcel_1[i] = ne_tFileInputExcel_1
															.getStringValue();
												}
												break;
											case org.apache.poi.ss.usermodel.Cell.CELL_TYPE_BOOLEAN:
												temp_row_tFileInputExcel_1[i] = String
														.valueOf(cell_tFileInputExcel_1
																.getBooleanCellValue());
												break;
											default:
												temp_row_tFileInputExcel_1[i] = "";
											}
											break;
										default:
											temp_row_tFileInputExcel_1[i] = "";
										}
									} else {
										temp_row_tFileInputExcel_1[i] = "";
									}

								} else {
									temp_row_tFileInputExcel_1[i] = "";
								}
							}
							boolean whetherReject_tFileInputExcel_1 = false;
							row1 = new row1Struct();
							int curColNum_tFileInputExcel_1 = -1;
							String curColName_tFileInputExcel_1 = "";
							try {
								if (temp_row_tFileInputExcel_1[0].length() > 0) {
									curColNum_tFileInputExcel_1 = 0 + start_column_tFileInputExcel_1 + 1;
									curColName_tFileInputExcel_1 = "numeroetudiant";

									row1.numeroetudiant = temp_row_tFileInputExcel_1[0];
								} else {
									row1.numeroetudiant = null;
									emptyColumnCount_tFileInputExcel_1++;
								}

								if (temp_row_tFileInputExcel_1[1].length() > 0) {
									curColNum_tFileInputExcel_1 = 1 + start_column_tFileInputExcel_1 + 1;
									curColName_tFileInputExcel_1 = "email";

									row1.email = temp_row_tFileInputExcel_1[1];
								} else {
									row1.email = null;
									emptyColumnCount_tFileInputExcel_1++;
								}

								if (temp_row_tFileInputExcel_1[2].length() > 0) {
									curColNum_tFileInputExcel_1 = 2 + start_column_tFileInputExcel_1 + 1;
									curColName_tFileInputExcel_1 = "nom";

									row1.nom = temp_row_tFileInputExcel_1[2];
								} else {
									row1.nom = null;
									emptyColumnCount_tFileInputExcel_1++;
								}

								if (temp_row_tFileInputExcel_1[3].length() > 0) {
									curColNum_tFileInputExcel_1 = 3 + start_column_tFileInputExcel_1 + 1;
									curColName_tFileInputExcel_1 = "prenom";

									row1.prenom = temp_row_tFileInputExcel_1[3];
								} else {
									row1.prenom = null;
									emptyColumnCount_tFileInputExcel_1++;
								}

								if (temp_row_tFileInputExcel_1[4].length() > 0) {
									curColNum_tFileInputExcel_1 = 4 + start_column_tFileInputExcel_1 + 1;
									curColName_tFileInputExcel_1 = "telephone";

									row1.telephone = temp_row_tFileInputExcel_1[4];
								} else {
									row1.telephone = null;
									emptyColumnCount_tFileInputExcel_1++;
								}

								if (temp_row_tFileInputExcel_1[5].length() > 0) {
									curColNum_tFileInputExcel_1 = 5 + start_column_tFileInputExcel_1 + 1;
									curColName_tFileInputExcel_1 = "adresse";

									row1.adresse = temp_row_tFileInputExcel_1[5];
								} else {
									row1.adresse = null;
									emptyColumnCount_tFileInputExcel_1++;
								}

								if (temp_row_tFileInputExcel_1[6].length() > 0) {
									curColNum_tFileInputExcel_1 = 6 + start_column_tFileInputExcel_1 + 1;
									curColName_tFileInputExcel_1 = "organisation";

									row1.organisation = temp_row_tFileInputExcel_1[6];
								} else {
									row1.organisation = null;
									emptyColumnCount_tFileInputExcel_1++;
								}

								nb_line_tFileInputExcel_1++;

							} catch (java.lang.Exception e) {
								whetherReject_tFileInputExcel_1 = true;
								System.err.println(e.getMessage());
								row1 = null;
							}

							/**
							 * [tFileInputExcel_1 begin ] stop
							 */

							/**
							 * [tFileInputExcel_1 main ] start
							 */

							currentComponent = "tFileInputExcel_1";

							tos_count_tFileInputExcel_1++;

							/**
							 * [tFileInputExcel_1 main ] stop
							 */

							// Start of branch "row1"
							if (row1 != null) {

								/**
								 * [tMap_1 main ] start
								 */

								currentComponent = "tMap_1";

								boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;

								// ###############################
								// # Input tables (lookups)
								boolean rejectedInnerJoin_tMap_1 = false;
								boolean mainRowRejected_tMap_1 = false;

								// ###############################
								{ // start of Var scope

									// ###############################
									// # Vars tables

									Var__tMap_1__Struct Var = Var__tMap_1;// ###############################
									// ###############################
									// # Output tables

									user = null;

									// # Output table : 'user'
									user_tmp.id = 0;
									user_tmp.username = row1.nom;
									user_tmp.username_canonical = row1.nom;
									user_tmp.email = row1.email;
									user_tmp.email_canonical = row1.email;
									user_tmp.enabled = 1;
									user_tmp.salt = "5kdd8w09fykockokc0s8c4cswooc004";
									user_tmp.password = "ZGvf_VuQSjIkRCY80Q0ydrIj98w4qU8APxR9m8W2pME";
									user_tmp.last_login = null;
									user_tmp.locked = false;
									user_tmp.expired = false;
									user_tmp.expires_at = null;
									user_tmp.confirmation_token = null;
									user_tmp.password_requested_at = null;
									user_tmp.roles = "a:1:{i:0;s:11:\"ROLE_TUTEUR\";}";
									user_tmp.credentials_expired = false;
									user_tmp.credentials_expire_at = null;
									user_tmp.type = "tuteur";
									user = user_tmp;
									// ###############################

								} // end of Var scope

								rejectedInnerJoin_tMap_1 = false;

								tos_count_tMap_1++;

								/**
								 * [tMap_1 main ] stop
								 */

								// Start of branch "user"
								if (user != null) {

									/**
									 * [tMysqlOutput_1 main ] start
									 */

									currentComponent = "tMysqlOutput_1";

									whetherReject_tMysqlOutput_1 = false;

									pstmt_tMysqlOutput_1.setInt(1, user.id);

									java.sql.ResultSet rs_tMysqlOutput_1 = pstmt_tMysqlOutput_1
											.executeQuery();
									int checkCount_tMysqlOutput_1 = -1;
									while (rs_tMysqlOutput_1.next()) {
										checkCount_tMysqlOutput_1 = rs_tMysqlOutput_1
												.getInt(1);
									}
									if (checkCount_tMysqlOutput_1 > 0) {

										if (user.username == null) {
											pstmtUpdate_tMysqlOutput_1.setNull(
													1, java.sql.Types.VARCHAR);
										} else {
											pstmtUpdate_tMysqlOutput_1
													.setString(1, user.username);
										}

										if (user.username_canonical == null) {
											pstmtUpdate_tMysqlOutput_1.setNull(
													2, java.sql.Types.VARCHAR);
										} else {
											pstmtUpdate_tMysqlOutput_1
													.setString(
															2,
															user.username_canonical);
										}

										if (user.email == null) {
											pstmtUpdate_tMysqlOutput_1.setNull(
													3, java.sql.Types.VARCHAR);
										} else {
											pstmtUpdate_tMysqlOutput_1
													.setString(3, user.email);
										}

										if (user.email_canonical == null) {
											pstmtUpdate_tMysqlOutput_1.setNull(
													4, java.sql.Types.VARCHAR);
										} else {
											pstmtUpdate_tMysqlOutput_1
													.setString(
															4,
															user.email_canonical);
										}

										pstmtUpdate_tMysqlOutput_1.setInt(5,
												user.enabled);

										if (user.salt == null) {
											pstmtUpdate_tMysqlOutput_1.setNull(
													6, java.sql.Types.VARCHAR);
										} else {
											pstmtUpdate_tMysqlOutput_1
													.setString(6, user.salt);
										}

										if (user.password == null) {
											pstmtUpdate_tMysqlOutput_1.setNull(
													7, java.sql.Types.VARCHAR);
										} else {
											pstmtUpdate_tMysqlOutput_1
													.setString(7, user.password);
										}

										if (user.last_login != null) {
											date_tMysqlOutput_1 = user.last_login
													.getTime();
											if (date_tMysqlOutput_1 < year1_tMysqlOutput_1
													|| date_tMysqlOutput_1 >= year10000_tMysqlOutput_1) {
												pstmtUpdate_tMysqlOutput_1
														.setString(8,
																"0000-00-00 00:00:00");
											} else {
												pstmtUpdate_tMysqlOutput_1
														.setTimestamp(
																8,
																new java.sql.Timestamp(
																		date_tMysqlOutput_1));
											}
										} else {
											pstmtUpdate_tMysqlOutput_1.setNull(
													8, java.sql.Types.DATE);
										}

										pstmtUpdate_tMysqlOutput_1.setBoolean(
												9, user.locked);

										pstmtUpdate_tMysqlOutput_1.setBoolean(
												10, user.expired);

										if (user.expires_at != null) {
											date_tMysqlOutput_1 = user.expires_at
													.getTime();
											if (date_tMysqlOutput_1 < year1_tMysqlOutput_1
													|| date_tMysqlOutput_1 >= year10000_tMysqlOutput_1) {
												pstmtUpdate_tMysqlOutput_1
														.setString(11,
																"0000-00-00 00:00:00");
											} else {
												pstmtUpdate_tMysqlOutput_1
														.setTimestamp(
																11,
																new java.sql.Timestamp(
																		date_tMysqlOutput_1));
											}
										} else {
											pstmtUpdate_tMysqlOutput_1.setNull(
													11, java.sql.Types.DATE);
										}

										if (user.confirmation_token == null) {
											pstmtUpdate_tMysqlOutput_1.setNull(
													12, java.sql.Types.VARCHAR);
										} else {
											pstmtUpdate_tMysqlOutput_1
													.setString(
															12,
															user.confirmation_token);
										}

										if (user.password_requested_at != null) {
											date_tMysqlOutput_1 = user.password_requested_at
													.getTime();
											if (date_tMysqlOutput_1 < year1_tMysqlOutput_1
													|| date_tMysqlOutput_1 >= year10000_tMysqlOutput_1) {
												pstmtUpdate_tMysqlOutput_1
														.setString(13,
																"0000-00-00 00:00:00");
											} else {
												pstmtUpdate_tMysqlOutput_1
														.setTimestamp(
																13,
																new java.sql.Timestamp(
																		date_tMysqlOutput_1));
											}
										} else {
											pstmtUpdate_tMysqlOutput_1.setNull(
													13, java.sql.Types.DATE);
										}

										if (user.roles == null) {
											pstmtUpdate_tMysqlOutput_1.setNull(
													14, java.sql.Types.VARCHAR);
										} else {
											pstmtUpdate_tMysqlOutput_1
													.setString(14, user.roles);
										}

										pstmtUpdate_tMysqlOutput_1.setBoolean(
												15, user.credentials_expired);

										if (user.credentials_expire_at != null) {
											date_tMysqlOutput_1 = user.credentials_expire_at
													.getTime();
											if (date_tMysqlOutput_1 < year1_tMysqlOutput_1
													|| date_tMysqlOutput_1 >= year10000_tMysqlOutput_1) {
												pstmtUpdate_tMysqlOutput_1
														.setString(16,
																"0000-00-00 00:00:00");
											} else {
												pstmtUpdate_tMysqlOutput_1
														.setTimestamp(
																16,
																new java.sql.Timestamp(
																		date_tMysqlOutput_1));
											}
										} else {
											pstmtUpdate_tMysqlOutput_1.setNull(
													16, java.sql.Types.DATE);
										}

										if (user.type == null) {
											pstmtUpdate_tMysqlOutput_1.setNull(
													17, java.sql.Types.VARCHAR);
										} else {
											pstmtUpdate_tMysqlOutput_1
													.setString(17, user.type);
										}

										pstmtUpdate_tMysqlOutput_1.setInt(
												18 + count_tMysqlOutput_1,
												user.id);

										try {
											updatedCount_tMysqlOutput_1 = updatedCount_tMysqlOutput_1
													+ pstmtUpdate_tMysqlOutput_1
															.executeUpdate();
										} catch (java.lang.Exception e) {
											whetherReject_tMysqlOutput_1 = true;
											System.err.print(e.getMessage());
										}
									} else {

										pstmtInsert_tMysqlOutput_1.setInt(1,
												user.id);

										if (user.username == null) {
											pstmtInsert_tMysqlOutput_1.setNull(
													2, java.sql.Types.VARCHAR);
										} else {
											pstmtInsert_tMysqlOutput_1
													.setString(2, user.username);
										}

										if (user.username_canonical == null) {
											pstmtInsert_tMysqlOutput_1.setNull(
													3, java.sql.Types.VARCHAR);
										} else {
											pstmtInsert_tMysqlOutput_1
													.setString(
															3,
															user.username_canonical);
										}

										if (user.email == null) {
											pstmtInsert_tMysqlOutput_1.setNull(
													4, java.sql.Types.VARCHAR);
										} else {
											pstmtInsert_tMysqlOutput_1
													.setString(4, user.email);
										}

										if (user.email_canonical == null) {
											pstmtInsert_tMysqlOutput_1.setNull(
													5, java.sql.Types.VARCHAR);
										} else {
											pstmtInsert_tMysqlOutput_1
													.setString(
															5,
															user.email_canonical);
										}

										pstmtInsert_tMysqlOutput_1.setInt(6,
												user.enabled);

										if (user.salt == null) {
											pstmtInsert_tMysqlOutput_1.setNull(
													7, java.sql.Types.VARCHAR);
										} else {
											pstmtInsert_tMysqlOutput_1
													.setString(7, user.salt);
										}

										if (user.password == null) {
											pstmtInsert_tMysqlOutput_1.setNull(
													8, java.sql.Types.VARCHAR);
										} else {
											pstmtInsert_tMysqlOutput_1
													.setString(8, user.password);
										}

										if (user.last_login != null) {
											date_tMysqlOutput_1 = user.last_login
													.getTime();
											if (date_tMysqlOutput_1 < year1_tMysqlOutput_1
													|| date_tMysqlOutput_1 >= year10000_tMysqlOutput_1) {
												pstmtInsert_tMysqlOutput_1
														.setString(9,
																"0000-00-00 00:00:00");
											} else {
												pstmtInsert_tMysqlOutput_1
														.setTimestamp(
																9,
																new java.sql.Timestamp(
																		date_tMysqlOutput_1));
											}
										} else {
											pstmtInsert_tMysqlOutput_1.setNull(
													9, java.sql.Types.DATE);
										}

										pstmtInsert_tMysqlOutput_1.setBoolean(
												10, user.locked);

										pstmtInsert_tMysqlOutput_1.setBoolean(
												11, user.expired);

										if (user.expires_at != null) {
											date_tMysqlOutput_1 = user.expires_at
													.getTime();
											if (date_tMysqlOutput_1 < year1_tMysqlOutput_1
													|| date_tMysqlOutput_1 >= year10000_tMysqlOutput_1) {
												pstmtInsert_tMysqlOutput_1
														.setString(12,
																"0000-00-00 00:00:00");
											} else {
												pstmtInsert_tMysqlOutput_1
														.setTimestamp(
																12,
																new java.sql.Timestamp(
																		date_tMysqlOutput_1));
											}
										} else {
											pstmtInsert_tMysqlOutput_1.setNull(
													12, java.sql.Types.DATE);
										}

										if (user.confirmation_token == null) {
											pstmtInsert_tMysqlOutput_1.setNull(
													13, java.sql.Types.VARCHAR);
										} else {
											pstmtInsert_tMysqlOutput_1
													.setString(
															13,
															user.confirmation_token);
										}

										if (user.password_requested_at != null) {
											date_tMysqlOutput_1 = user.password_requested_at
													.getTime();
											if (date_tMysqlOutput_1 < year1_tMysqlOutput_1
													|| date_tMysqlOutput_1 >= year10000_tMysqlOutput_1) {
												pstmtInsert_tMysqlOutput_1
														.setString(14,
																"0000-00-00 00:00:00");
											} else {
												pstmtInsert_tMysqlOutput_1
														.setTimestamp(
																14,
																new java.sql.Timestamp(
																		date_tMysqlOutput_1));
											}
										} else {
											pstmtInsert_tMysqlOutput_1.setNull(
													14, java.sql.Types.DATE);
										}

										if (user.roles == null) {
											pstmtInsert_tMysqlOutput_1.setNull(
													15, java.sql.Types.VARCHAR);
										} else {
											pstmtInsert_tMysqlOutput_1
													.setString(15, user.roles);
										}

										pstmtInsert_tMysqlOutput_1.setBoolean(
												16, user.credentials_expired);

										if (user.credentials_expire_at != null) {
											date_tMysqlOutput_1 = user.credentials_expire_at
													.getTime();
											if (date_tMysqlOutput_1 < year1_tMysqlOutput_1
													|| date_tMysqlOutput_1 >= year10000_tMysqlOutput_1) {
												pstmtInsert_tMysqlOutput_1
														.setString(17,
																"0000-00-00 00:00:00");
											} else {
												pstmtInsert_tMysqlOutput_1
														.setTimestamp(
																17,
																new java.sql.Timestamp(
																		date_tMysqlOutput_1));
											}
										} else {
											pstmtInsert_tMysqlOutput_1.setNull(
													17, java.sql.Types.DATE);
										}

										if (user.type == null) {
											pstmtInsert_tMysqlOutput_1.setNull(
													18, java.sql.Types.VARCHAR);
										} else {
											pstmtInsert_tMysqlOutput_1
													.setString(18, user.type);
										}

										try {
											insertedCount_tMysqlOutput_1 = insertedCount_tMysqlOutput_1
													+ pstmtInsert_tMysqlOutput_1
															.executeUpdate();
										} catch (java.lang.Exception e) {
											whetherReject_tMysqlOutput_1 = true;
											System.err.print(e.getMessage());
										}
									}
									nb_line_tMysqlOutput_1++;

									commitCounter_tMysqlOutput_1++;

									if (commitEvery_tMysqlOutput_1 <= commitCounter_tMysqlOutput_1) {

										conn_tMysqlOutput_1.commit();

										commitCounter_tMysqlOutput_1 = 0;

									}

									tos_count_tMysqlOutput_1++;

									/**
									 * [tMysqlOutput_1 main ] stop
									 */

								} // End of branch "user"

							} // End of branch "row1"

							/**
							 * [tFileInputExcel_1 end ] start
							 */

							currentComponent = "tFileInputExcel_1";

						}

						globalMap.put("tFileInputExcel_1_NB_LINE",
								nb_line_tFileInputExcel_1);

					}

				} finally {

					if (!(source_tFileInputExcel_1 instanceof java.io.InputStream)) {
						workbook_tFileInputExcel_1.getPackage().revert();
					}

				}

				ok_Hash.put("tFileInputExcel_1", true);
				end_Hash.put("tFileInputExcel_1", System.currentTimeMillis());

				/**
				 * [tFileInputExcel_1 end ] stop
				 */

				/**
				 * [tMap_1 end ] start
				 */

				currentComponent = "tMap_1";

				// ###############################
				// # Lookup hashes releasing
				// ###############################

				ok_Hash.put("tMap_1", true);
				end_Hash.put("tMap_1", System.currentTimeMillis());

				/**
				 * [tMap_1 end ] stop
				 */

				/**
				 * [tMysqlOutput_1 end ] start
				 */

				currentComponent = "tMysqlOutput_1";

				if (pstmtUpdate_tMysqlOutput_1 != null) {

					pstmtUpdate_tMysqlOutput_1.close();

				}
				if (pstmtInsert_tMysqlOutput_1 != null) {

					pstmtInsert_tMysqlOutput_1.close();

				}
				if (pstmt_tMysqlOutput_1 != null) {

					pstmt_tMysqlOutput_1.close();

				}

				conn_tMysqlOutput_1.commit();

				conn_tMysqlOutput_1.close();
				resourceMap.put("finish_tMysqlOutput_1", true);

				nb_line_deleted_tMysqlOutput_1 = nb_line_deleted_tMysqlOutput_1
						+ deletedCount_tMysqlOutput_1;
				nb_line_update_tMysqlOutput_1 = nb_line_update_tMysqlOutput_1
						+ updatedCount_tMysqlOutput_1;
				nb_line_inserted_tMysqlOutput_1 = nb_line_inserted_tMysqlOutput_1
						+ insertedCount_tMysqlOutput_1;
				nb_line_rejected_tMysqlOutput_1 = nb_line_rejected_tMysqlOutput_1
						+ rejectedCount_tMysqlOutput_1;
				globalMap.put("tMysqlOutput_1_NB_LINE", nb_line_tMysqlOutput_1);
				globalMap.put("tMysqlOutput_1_NB_LINE_UPDATED",
						nb_line_update_tMysqlOutput_1);
				globalMap.put("tMysqlOutput_1_NB_LINE_INSERTED",
						nb_line_inserted_tMysqlOutput_1);
				globalMap.put("tMysqlOutput_1_NB_LINE_DELETED",
						nb_line_deleted_tMysqlOutput_1);
				globalMap.put("tMysqlOutput_1_NB_LINE_REJECTED",
						nb_line_rejected_tMysqlOutput_1);

				ok_Hash.put("tMysqlOutput_1", true);
				end_Hash.put("tMysqlOutput_1", System.currentTimeMillis());

				/**
				 * [tMysqlOutput_1 end ] stop
				 */

			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT",
						"CONNECTION:SUBJOB_OK:tFileInputExcel_1:OnSubjobOk",
						"", Thread.currentThread().getId() + "", "", "", "",
						"", "");
			}

			tFileInputExcel_2Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tFileInputExcel_1 finally ] start
				 */

				currentComponent = "tFileInputExcel_1";

				/**
				 * [tFileInputExcel_1 finally ] stop
				 */

				/**
				 * [tMap_1 finally ] start
				 */

				currentComponent = "tMap_1";

				/**
				 * [tMap_1 finally ] stop
				 */

				/**
				 * [tMysqlOutput_1 finally ] start
				 */

				currentComponent = "tMysqlOutput_1";

				if (resourceMap.get("finish_tMysqlOutput_1") == null) {
					if (resourceMap.get("conn_tMysqlOutput_1") != null) {
						try {
							((java.sql.Connection) resourceMap
									.get("conn_tMysqlOutput_1")).close();
						} catch (java.sql.SQLException sqlEx_tMysqlOutput_1) {
							System.out
									.println("failed to close the connection in tMysqlOutput_1 :"
											+ sqlEx_tMysqlOutput_1.getMessage());
						}
					}
				}

				/**
				 * [tMysqlOutput_1 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileInputExcel_1_SUBPROCESS_STATE", 1);
	}

	public static class importtuteurStruct implements
			routines.system.IPersistableRow<importtuteurStruct> {
		final static byte[] commonByteArrayLock_PROJETDEMO_importertuteur = new byte[0];
		static byte[] commonByteArray_PROJETDEMO_importertuteur = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public int id;

		public int getId() {
			return this.id;
		}

		public String prenom;

		public String getPrenom() {
			return this.prenom;
		}

		public String adresse;

		public String getAdresse() {
			return this.adresse;
		}

		public String telephone;

		public String getTelephone() {
			return this.telephone;
		}

		public String organisation;

		public String getOrganisation() {
			return this.organisation;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.id;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final importtuteurStruct other = (importtuteurStruct) obj;

			if (this.id != other.id)
				return false;

			return true;
		}

		public void copyDataTo(importtuteurStruct other) {

			other.id = this.id;
			other.prenom = this.prenom;
			other.adresse = this.adresse;
			other.telephone = this.telephone;
			other.organisation = this.organisation;

		}

		public void copyKeysDataTo(importtuteurStruct other) {

			other.id = this.id;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_PROJETDEMO_importertuteur.length) {
					if (length < 1024
							&& commonByteArray_PROJETDEMO_importertuteur.length == 0) {
						commonByteArray_PROJETDEMO_importertuteur = new byte[1024];
					} else {
						commonByteArray_PROJETDEMO_importertuteur = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_PROJETDEMO_importertuteur, 0,
						length);
				strReturn = new String(
						commonByteArray_PROJETDEMO_importertuteur, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_PROJETDEMO_importertuteur) {

				try {

					int length = 0;

					this.id = dis.readInt();

					this.prenom = readString(dis);

					this.adresse = readString(dis);

					this.telephone = readString(dis);

					this.organisation = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.id);

				// String

				writeString(this.prenom, dos);

				// String

				writeString(this.adresse, dos);

				// String

				writeString(this.telephone, dos);

				// String

				writeString(this.organisation, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("id=" + String.valueOf(id));
			sb.append(",prenom=" + prenom);
			sb.append(",adresse=" + adresse);
			sb.append(",telephone=" + telephone);
			sb.append(",organisation=" + organisation);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(importtuteurStruct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.id, other.id);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row2Struct implements
			routines.system.IPersistableRow<row2Struct> {
		final static byte[] commonByteArrayLock_PROJETDEMO_importertuteur = new byte[0];
		static byte[] commonByteArray_PROJETDEMO_importertuteur = new byte[0];

		public String numeroetudiant;

		public String getNumeroetudiant() {
			return this.numeroetudiant;
		}

		public String email;

		public String getEmail() {
			return this.email;
		}

		public String nom;

		public String getNom() {
			return this.nom;
		}

		public String prenom;

		public String getPrenom() {
			return this.prenom;
		}

		public String telephone;

		public String getTelephone() {
			return this.telephone;
		}

		public String adresse;

		public String getAdresse() {
			return this.adresse;
		}

		public String organisation;

		public String getOrganisation() {
			return this.organisation;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_PROJETDEMO_importertuteur.length) {
					if (length < 1024
							&& commonByteArray_PROJETDEMO_importertuteur.length == 0) {
						commonByteArray_PROJETDEMO_importertuteur = new byte[1024];
					} else {
						commonByteArray_PROJETDEMO_importertuteur = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_PROJETDEMO_importertuteur, 0,
						length);
				strReturn = new String(
						commonByteArray_PROJETDEMO_importertuteur, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_PROJETDEMO_importertuteur) {

				try {

					int length = 0;

					this.numeroetudiant = readString(dis);

					this.email = readString(dis);

					this.nom = readString(dis);

					this.prenom = readString(dis);

					this.telephone = readString(dis);

					this.adresse = readString(dis);

					this.organisation = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.numeroetudiant, dos);

				// String

				writeString(this.email, dos);

				// String

				writeString(this.nom, dos);

				// String

				writeString(this.prenom, dos);

				// String

				writeString(this.telephone, dos);

				// String

				writeString(this.adresse, dos);

				// String

				writeString(this.organisation, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("numeroetudiant=" + numeroetudiant);
			sb.append(",email=" + email);
			sb.append(",nom=" + nom);
			sb.append(",prenom=" + prenom);
			sb.append(",telephone=" + telephone);
			sb.append(",adresse=" + adresse);
			sb.append(",organisation=" + organisation);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row2Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class after_tFileInputExcel_2Struct implements
			routines.system.IPersistableRow<after_tFileInputExcel_2Struct> {
		final static byte[] commonByteArrayLock_PROJETDEMO_importertuteur = new byte[0];
		static byte[] commonByteArray_PROJETDEMO_importertuteur = new byte[0];

		public String numeroetudiant;

		public String getNumeroetudiant() {
			return this.numeroetudiant;
		}

		public String email;

		public String getEmail() {
			return this.email;
		}

		public String nom;

		public String getNom() {
			return this.nom;
		}

		public String prenom;

		public String getPrenom() {
			return this.prenom;
		}

		public String telephone;

		public String getTelephone() {
			return this.telephone;
		}

		public String adresse;

		public String getAdresse() {
			return this.adresse;
		}

		public String organisation;

		public String getOrganisation() {
			return this.organisation;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_PROJETDEMO_importertuteur.length) {
					if (length < 1024
							&& commonByteArray_PROJETDEMO_importertuteur.length == 0) {
						commonByteArray_PROJETDEMO_importertuteur = new byte[1024];
					} else {
						commonByteArray_PROJETDEMO_importertuteur = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_PROJETDEMO_importertuteur, 0,
						length);
				strReturn = new String(
						commonByteArray_PROJETDEMO_importertuteur, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_PROJETDEMO_importertuteur) {

				try {

					int length = 0;

					this.numeroetudiant = readString(dis);

					this.email = readString(dis);

					this.nom = readString(dis);

					this.prenom = readString(dis);

					this.telephone = readString(dis);

					this.adresse = readString(dis);

					this.organisation = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.numeroetudiant, dos);

				// String

				writeString(this.email, dos);

				// String

				writeString(this.nom, dos);

				// String

				writeString(this.prenom, dos);

				// String

				writeString(this.telephone, dos);

				// String

				writeString(this.adresse, dos);

				// String

				writeString(this.organisation, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("numeroetudiant=" + numeroetudiant);
			sb.append(",email=" + email);
			sb.append(",nom=" + nom);
			sb.append(",prenom=" + prenom);
			sb.append(",telephone=" + telephone);
			sb.append(",adresse=" + adresse);
			sb.append(",organisation=" + organisation);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(after_tFileInputExcel_2Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputExcel_2Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileInputExcel_2_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				tMysqlInput_1Process(globalMap);

				row2Struct row2 = new row2Struct();
				importtuteurStruct importtuteur = new importtuteurStruct();

				/**
				 * [tMysqlOutput_2 begin ] start
				 */

				ok_Hash.put("tMysqlOutput_2", false);
				start_Hash.put("tMysqlOutput_2", System.currentTimeMillis());

				currentComponent = "tMysqlOutput_2";

				int tos_count_tMysqlOutput_2 = 0;

				int updateKeyCount_tMysqlOutput_2 = 1;
				if (updateKeyCount_tMysqlOutput_2 < 1) {

					throw new RuntimeException(
							"For update, Schema must have a key");
				}

				int nb_line_tMysqlOutput_2 = 0;
				int nb_line_update_tMysqlOutput_2 = 0;
				int nb_line_inserted_tMysqlOutput_2 = 0;
				int nb_line_deleted_tMysqlOutput_2 = 0;
				int nb_line_rejected_tMysqlOutput_2 = 0;

				int deletedCount_tMysqlOutput_2 = 0;
				int updatedCount_tMysqlOutput_2 = 0;
				int insertedCount_tMysqlOutput_2 = 0;

				int rejectedCount_tMysqlOutput_2 = 0;

				String tableName_tMysqlOutput_2 = "Tuteur";
				boolean whetherReject_tMysqlOutput_2 = false;

				java.util.Calendar calendar_tMysqlOutput_2 = java.util.Calendar
						.getInstance();
				calendar_tMysqlOutput_2.set(1, 0, 1, 0, 0, 0);
				long year1_tMysqlOutput_2 = calendar_tMysqlOutput_2.getTime()
						.getTime();
				calendar_tMysqlOutput_2.set(10000, 0, 1, 0, 0, 0);
				long year10000_tMysqlOutput_2 = calendar_tMysqlOutput_2
						.getTime().getTime();
				long date_tMysqlOutput_2;

				java.sql.Connection conn_tMysqlOutput_2 = null;
				String dbProperties_tMysqlOutput_2 = "noDatetimeStringSync=true";
				String url_tMysqlOutput_2 = null;
				if (dbProperties_tMysqlOutput_2 == null
						|| dbProperties_tMysqlOutput_2.trim().length() == 0) {
					url_tMysqlOutput_2 = "jdbc:mysql://" + "localhost" + ":"
							+ "8889" + "/" + "galter" + "?"
							+ "rewriteBatchedStatements=true";
				} else {
					String properties_tMysqlOutput_2 = "noDatetimeStringSync=true";
					if (!properties_tMysqlOutput_2
							.contains("rewriteBatchedStatements")) {
						properties_tMysqlOutput_2 += "&rewriteBatchedStatements=true";
					}

					url_tMysqlOutput_2 = "jdbc:mysql://" + "localhost" + ":"
							+ "8889" + "/" + "galter" + "?"
							+ properties_tMysqlOutput_2;
				}
				String dbUser_tMysqlOutput_2 = "root";

				final String decryptedPassword_tMysqlOutput_2 = routines.system.PasswordEncryptUtil
						.decryptPassword("7a440551249af37a");

				String dbPwd_tMysqlOutput_2 = decryptedPassword_tMysqlOutput_2;

				java.lang.Class.forName("org.gjt.mm.mysql.Driver");

				conn_tMysqlOutput_2 = java.sql.DriverManager.getConnection(
						url_tMysqlOutput_2, dbUser_tMysqlOutput_2,
						dbPwd_tMysqlOutput_2);

				resourceMap.put("conn_tMysqlOutput_2", conn_tMysqlOutput_2);
				conn_tMysqlOutput_2.setAutoCommit(false);
				int commitEvery_tMysqlOutput_2 = 10000;
				int commitCounter_tMysqlOutput_2 = 0;

				int count_tMysqlOutput_2 = 0;

				java.sql.PreparedStatement pstmt_tMysqlOutput_2 = conn_tMysqlOutput_2
						.prepareStatement("SELECT COUNT(1) FROM `" + "Tuteur"
								+ "` WHERE `id` = ?");
				String insert_tMysqlOutput_2 = "INSERT INTO `"
						+ "Tuteur"
						+ "` (`id`,`prenom`,`adresse`,`telephone`,`organisation`) VALUES (?,?,?,?,?)";

				java.sql.PreparedStatement pstmtInsert_tMysqlOutput_2 = conn_tMysqlOutput_2
						.prepareStatement(insert_tMysqlOutput_2);
				String update_tMysqlOutput_2 = "UPDATE `"
						+ "Tuteur"
						+ "` SET `prenom` = ?,`adresse` = ?,`telephone` = ?,`organisation` = ? WHERE `id` = ?";

				java.sql.PreparedStatement pstmtUpdate_tMysqlOutput_2 = conn_tMysqlOutput_2
						.prepareStatement(update_tMysqlOutput_2);

				/**
				 * [tMysqlOutput_2 begin ] stop
				 */

				/**
				 * [tMap_2 begin ] start
				 */

				ok_Hash.put("tMap_2", false);
				start_Hash.put("tMap_2", System.currentTimeMillis());

				currentComponent = "tMap_2";

				int tos_count_tMap_2 = 0;

				// ###############################
				// # Lookup's keys initialization

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row3Struct> tHash_Lookup_row3 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row3Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row3Struct>) globalMap
						.get("tHash_Lookup_row3"));

				row3Struct row3HashKey = new row3Struct();
				row3Struct row3Default = new row3Struct();
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_2__Struct {
				}
				Var__tMap_2__Struct Var__tMap_2 = new Var__tMap_2__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				importtuteurStruct importtuteur_tmp = new importtuteurStruct();
				// ###############################

				/**
				 * [tMap_2 begin ] stop
				 */

				/**
				 * [tFileInputExcel_2 begin ] start
				 */

				ok_Hash.put("tFileInputExcel_2", false);
				start_Hash.put("tFileInputExcel_2", System.currentTimeMillis());

				currentComponent = "tFileInputExcel_2";

				int tos_count_tFileInputExcel_2 = 0;

				org.apache.log4j.Logger logger_tFileInputExcel_2 = org.apache.log4j.Logger
						.getLogger("org.openxml4j.opc");
				logger_tFileInputExcel_2.setLevel(org.apache.log4j.Level.WARN);
				class RegexUtil_tFileInputExcel_2 {

					public java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> getSheets(
							org.apache.poi.xssf.usermodel.XSSFWorkbook workbook,
							String oneSheetName, boolean useRegex) {

						java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> list = new java.util.ArrayList<org.apache.poi.xssf.usermodel.XSSFSheet>();

						if (useRegex) {// this part process the regex issue

							java.util.regex.Pattern pattern = java.util.regex.Pattern
									.compile(oneSheetName);
							for (org.apache.poi.xssf.usermodel.XSSFSheet sheet : workbook) {
								String sheetName = sheet.getSheetName();
								java.util.regex.Matcher matcher = pattern
										.matcher(sheetName);
								if (matcher.matches()) {
									if (sheet != null) {
										list.add(sheet);
									}
								}
							}

						} else {
							org.apache.poi.xssf.usermodel.XSSFSheet sheet = workbook
									.getSheet(oneSheetName);
							if (sheet != null) {
								list.add(sheet);
							}

						}

						return list;
					}

					public java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> getSheets(
							org.apache.poi.xssf.usermodel.XSSFWorkbook workbook,
							int index, boolean useRegex) {
						java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> list = new java.util.ArrayList<org.apache.poi.xssf.usermodel.XSSFSheet>();
						org.apache.poi.xssf.usermodel.XSSFSheet sheet = workbook
								.getSheetAt(index);
						if (sheet != null) {
							list.add(sheet);
						}
						return list;
					}

				}
				RegexUtil_tFileInputExcel_2 regexUtil_tFileInputExcel_2 = new RegexUtil_tFileInputExcel_2();

				Object source_tFileInputExcel_2 = context.source;
				org.apache.poi.xssf.usermodel.XSSFWorkbook workbook_tFileInputExcel_2 = null;

				if (source_tFileInputExcel_2 instanceof String) {
					workbook_tFileInputExcel_2 = new org.apache.poi.xssf.usermodel.XSSFWorkbook(
							(String) source_tFileInputExcel_2);
				} else if (source_tFileInputExcel_2 instanceof java.io.InputStream) {
					workbook_tFileInputExcel_2 = new org.apache.poi.xssf.usermodel.XSSFWorkbook(
							(java.io.InputStream) source_tFileInputExcel_2);
				} else {
					workbook_tFileInputExcel_2 = null;

					throw new java.lang.Exception(
							"The data source should be specified as Inputstream or File Path!");
				}
				try {

					java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> sheetList_tFileInputExcel_2 = new java.util.ArrayList<org.apache.poi.xssf.usermodel.XSSFSheet>();
					for (org.apache.poi.xssf.usermodel.XSSFSheet sheet_tFileInputExcel_2 : workbook_tFileInputExcel_2) {
						sheetList_tFileInputExcel_2
								.add(sheet_tFileInputExcel_2);
					}
					if (sheetList_tFileInputExcel_2.size() <= 0) {

						throw new RuntimeException("Special sheets not exist!");
					}

					java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> sheetList_FilterNull_tFileInputExcel_2 = new java.util.ArrayList<org.apache.poi.xssf.usermodel.XSSFSheet>();
					for (org.apache.poi.xssf.usermodel.XSSFSheet sheet_FilterNull_tFileInputExcel_2 : sheetList_tFileInputExcel_2) {
						if (sheet_FilterNull_tFileInputExcel_2 != null
								&& sheetList_FilterNull_tFileInputExcel_2
										.iterator() != null
								&& sheet_FilterNull_tFileInputExcel_2
										.iterator().hasNext()) {
							sheetList_FilterNull_tFileInputExcel_2
									.add(sheet_FilterNull_tFileInputExcel_2);
						}
					}
					sheetList_tFileInputExcel_2 = sheetList_FilterNull_tFileInputExcel_2;
					if (sheetList_tFileInputExcel_2.size() > 0) {
						int nb_line_tFileInputExcel_2 = 0;

						int begin_line_tFileInputExcel_2 = 0;

						int footer_input_tFileInputExcel_2 = 0;

						int end_line_tFileInputExcel_2 = 0;
						for (org.apache.poi.xssf.usermodel.XSSFSheet sheet_tFileInputExcel_2 : sheetList_tFileInputExcel_2) {
							end_line_tFileInputExcel_2 += (sheet_tFileInputExcel_2
									.getLastRowNum() + 1);
						}
						end_line_tFileInputExcel_2 -= footer_input_tFileInputExcel_2;
						int limit_tFileInputExcel_2 = -1;
						int start_column_tFileInputExcel_2 = 1 - 1;
						int end_column_tFileInputExcel_2 = -1;

						org.apache.poi.xssf.usermodel.XSSFRow row_tFileInputExcel_2 = null;
						org.apache.poi.xssf.usermodel.XSSFSheet sheet_tFileInputExcel_2 = sheetList_tFileInputExcel_2
								.get(0);
						int rowCount_tFileInputExcel_2 = 0;
						int sheetIndex_tFileInputExcel_2 = 0;
						int currentRows_tFileInputExcel_2 = (sheetList_tFileInputExcel_2
								.get(0).getLastRowNum() + 1);

						// for the number format
						java.text.DecimalFormat df_tFileInputExcel_2 = new java.text.DecimalFormat(
								"#.####################################");
						char decimalChar_tFileInputExcel_2 = df_tFileInputExcel_2
								.getDecimalFormatSymbols()
								.getDecimalSeparator();

						for (int i_tFileInputExcel_2 = begin_line_tFileInputExcel_2; i_tFileInputExcel_2 < end_line_tFileInputExcel_2; i_tFileInputExcel_2++) {

							int emptyColumnCount_tFileInputExcel_2 = 0;

							if (limit_tFileInputExcel_2 != -1
									&& nb_line_tFileInputExcel_2 >= limit_tFileInputExcel_2) {
								break;
							}

							while (i_tFileInputExcel_2 >= rowCount_tFileInputExcel_2
									+ currentRows_tFileInputExcel_2) {
								rowCount_tFileInputExcel_2 += currentRows_tFileInputExcel_2;
								sheet_tFileInputExcel_2 = sheetList_tFileInputExcel_2
										.get(++sheetIndex_tFileInputExcel_2);
								currentRows_tFileInputExcel_2 = (sheet_tFileInputExcel_2
										.getLastRowNum() + 1);
							}
							globalMap.put("tFileInputExcel_2_CURRENT_SHEET",
									sheet_tFileInputExcel_2.getSheetName());
							if (rowCount_tFileInputExcel_2 <= i_tFileInputExcel_2) {
								row_tFileInputExcel_2 = sheet_tFileInputExcel_2
										.getRow(i_tFileInputExcel_2
												- rowCount_tFileInputExcel_2);
							}
							row2 = null;
							String[] temp_row_tFileInputExcel_2 = new String[7];
							int excel_end_column_tFileInputExcel_2;
							if (row_tFileInputExcel_2 == null) {
								excel_end_column_tFileInputExcel_2 = 0;
							} else {
								excel_end_column_tFileInputExcel_2 = row_tFileInputExcel_2
										.getLastCellNum();
							}
							int actual_end_column_tFileInputExcel_2;
							if (end_column_tFileInputExcel_2 == -1) {
								actual_end_column_tFileInputExcel_2 = excel_end_column_tFileInputExcel_2;
							} else {
								actual_end_column_tFileInputExcel_2 = end_column_tFileInputExcel_2 > excel_end_column_tFileInputExcel_2 ? excel_end_column_tFileInputExcel_2
										: end_column_tFileInputExcel_2;
							}
							org.apache.poi.ss.formula.eval.NumberEval ne_tFileInputExcel_2 = null;
							for (int i = 0; i < 7; i++) {
								if (i + start_column_tFileInputExcel_2 < actual_end_column_tFileInputExcel_2) {
									org.apache.poi.ss.usermodel.Cell cell_tFileInputExcel_2 = row_tFileInputExcel_2
											.getCell(i
													+ start_column_tFileInputExcel_2);
									if (cell_tFileInputExcel_2 != null) {
										switch (cell_tFileInputExcel_2
												.getCellType()) {
										case org.apache.poi.ss.usermodel.Cell.CELL_TYPE_STRING:
											temp_row_tFileInputExcel_2[i] = cell_tFileInputExcel_2
													.getRichStringCellValue()
													.getString();
											break;
										case org.apache.poi.ss.usermodel.Cell.CELL_TYPE_NUMERIC:
											if (org.apache.poi.ss.usermodel.DateUtil
													.isCellDateFormatted(cell_tFileInputExcel_2)) {
												temp_row_tFileInputExcel_2[i] = cell_tFileInputExcel_2
														.getDateCellValue()
														.toString();
											} else {
												temp_row_tFileInputExcel_2[i] = df_tFileInputExcel_2
														.format(cell_tFileInputExcel_2
																.getNumericCellValue());
											}
											break;
										case org.apache.poi.ss.usermodel.Cell.CELL_TYPE_BOOLEAN:
											temp_row_tFileInputExcel_2[i] = String
													.valueOf(cell_tFileInputExcel_2
															.getBooleanCellValue());
											break;
										case org.apache.poi.ss.usermodel.Cell.CELL_TYPE_FORMULA:
											switch (cell_tFileInputExcel_2
													.getCachedFormulaResultType()) {
											case org.apache.poi.ss.usermodel.Cell.CELL_TYPE_STRING:
												temp_row_tFileInputExcel_2[i] = cell_tFileInputExcel_2
														.getRichStringCellValue()
														.getString();
												break;
											case org.apache.poi.ss.usermodel.Cell.CELL_TYPE_NUMERIC:
												if (org.apache.poi.ss.usermodel.DateUtil
														.isCellDateFormatted(cell_tFileInputExcel_2)) {
													temp_row_tFileInputExcel_2[i] = cell_tFileInputExcel_2
															.getDateCellValue()
															.toString();
												} else {
													ne_tFileInputExcel_2 = new org.apache.poi.ss.formula.eval.NumberEval(
															cell_tFileInputExcel_2
																	.getNumericCellValue());
													temp_row_tFileInputExcel_2[i] = ne_tFileInputExcel_2
															.getStringValue();
												}
												break;
											case org.apache.poi.ss.usermodel.Cell.CELL_TYPE_BOOLEAN:
												temp_row_tFileInputExcel_2[i] = String
														.valueOf(cell_tFileInputExcel_2
																.getBooleanCellValue());
												break;
											default:
												temp_row_tFileInputExcel_2[i] = "";
											}
											break;
										default:
											temp_row_tFileInputExcel_2[i] = "";
										}
									} else {
										temp_row_tFileInputExcel_2[i] = "";
									}

								} else {
									temp_row_tFileInputExcel_2[i] = "";
								}
							}
							boolean whetherReject_tFileInputExcel_2 = false;
							row2 = new row2Struct();
							int curColNum_tFileInputExcel_2 = -1;
							String curColName_tFileInputExcel_2 = "";
							try {
								if (temp_row_tFileInputExcel_2[0].length() > 0) {
									curColNum_tFileInputExcel_2 = 0 + start_column_tFileInputExcel_2 + 1;
									curColName_tFileInputExcel_2 = "numeroetudiant";

									row2.numeroetudiant = temp_row_tFileInputExcel_2[0];
								} else {
									row2.numeroetudiant = null;
									emptyColumnCount_tFileInputExcel_2++;
								}

								if (temp_row_tFileInputExcel_2[1].length() > 0) {
									curColNum_tFileInputExcel_2 = 1 + start_column_tFileInputExcel_2 + 1;
									curColName_tFileInputExcel_2 = "email";

									row2.email = temp_row_tFileInputExcel_2[1];
								} else {
									row2.email = null;
									emptyColumnCount_tFileInputExcel_2++;
								}

								if (temp_row_tFileInputExcel_2[2].length() > 0) {
									curColNum_tFileInputExcel_2 = 2 + start_column_tFileInputExcel_2 + 1;
									curColName_tFileInputExcel_2 = "nom";

									row2.nom = temp_row_tFileInputExcel_2[2];
								} else {
									row2.nom = null;
									emptyColumnCount_tFileInputExcel_2++;
								}

								if (temp_row_tFileInputExcel_2[3].length() > 0) {
									curColNum_tFileInputExcel_2 = 3 + start_column_tFileInputExcel_2 + 1;
									curColName_tFileInputExcel_2 = "prenom";

									row2.prenom = temp_row_tFileInputExcel_2[3];
								} else {
									row2.prenom = null;
									emptyColumnCount_tFileInputExcel_2++;
								}

								if (temp_row_tFileInputExcel_2[4].length() > 0) {
									curColNum_tFileInputExcel_2 = 4 + start_column_tFileInputExcel_2 + 1;
									curColName_tFileInputExcel_2 = "telephone";

									row2.telephone = temp_row_tFileInputExcel_2[4];
								} else {
									row2.telephone = null;
									emptyColumnCount_tFileInputExcel_2++;
								}

								if (temp_row_tFileInputExcel_2[5].length() > 0) {
									curColNum_tFileInputExcel_2 = 5 + start_column_tFileInputExcel_2 + 1;
									curColName_tFileInputExcel_2 = "adresse";

									row2.adresse = temp_row_tFileInputExcel_2[5];
								} else {
									row2.adresse = null;
									emptyColumnCount_tFileInputExcel_2++;
								}

								if (temp_row_tFileInputExcel_2[6].length() > 0) {
									curColNum_tFileInputExcel_2 = 6 + start_column_tFileInputExcel_2 + 1;
									curColName_tFileInputExcel_2 = "organisation";

									row2.organisation = temp_row_tFileInputExcel_2[6];
								} else {
									row2.organisation = null;
									emptyColumnCount_tFileInputExcel_2++;
								}

								nb_line_tFileInputExcel_2++;

							} catch (java.lang.Exception e) {
								whetherReject_tFileInputExcel_2 = true;
								System.err.println(e.getMessage());
								row2 = null;
							}

							/**
							 * [tFileInputExcel_2 begin ] stop
							 */

							/**
							 * [tFileInputExcel_2 main ] start
							 */

							currentComponent = "tFileInputExcel_2";

							tos_count_tFileInputExcel_2++;

							/**
							 * [tFileInputExcel_2 main ] stop
							 */

							// Start of branch "row2"
							if (row2 != null) {

								/**
								 * [tMap_2 main ] start
								 */

								currentComponent = "tMap_2";

								boolean hasCasePrimitiveKeyWithNull_tMap_2 = false;

								// ###############################
								// # Input tables (lookups)
								boolean rejectedInnerJoin_tMap_2 = false;
								boolean mainRowRejected_tMap_2 = false;

								// /////////////////////////////////////////////
								// Starting Lookup Table "row3"
								// /////////////////////////////////////////////

								boolean forceLooprow3 = false;

								row3Struct row3ObjectFromLookup = null;

								if (!rejectedInnerJoin_tMap_2) { // G_TM_M_020

									hasCasePrimitiveKeyWithNull_tMap_2 = false;

									row3HashKey.email = row2.email;

									row3HashKey.hashCodeDirty = true;

									tHash_Lookup_row3.lookup(row3HashKey);

								} // G_TM_M_020

								if (tHash_Lookup_row3 != null
										&& tHash_Lookup_row3
												.getCount(row3HashKey) > 1) { // G
																				// 071

									// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row3' and it contains more one result from keys :  row3.email = '"
									// + row3HashKey.email + "'");
								} // G 071

								row3Struct row3 = null;

								row3Struct fromLookup_row3 = null;
								row3 = row3Default;

								if (tHash_Lookup_row3 != null
										&& tHash_Lookup_row3.hasNext()) { // G
																			// 099

									fromLookup_row3 = tHash_Lookup_row3.next();

								} // G 099

								if (fromLookup_row3 != null) {
									row3 = fromLookup_row3;
								}

								// ###############################
								{ // start of Var scope

									// ###############################
									// # Vars tables

									Var__tMap_2__Struct Var = Var__tMap_2;// ###############################
									// ###############################
									// # Output tables

									importtuteur = null;

									// # Output table : 'importtuteur'
									importtuteur_tmp.id = row3.id;
									importtuteur_tmp.prenom = row2.prenom;
									importtuteur_tmp.adresse = row2.adresse;
									importtuteur_tmp.telephone = row2.telephone;
									importtuteur_tmp.organisation = row2.organisation;
									importtuteur = importtuteur_tmp;
									// ###############################

								} // end of Var scope

								rejectedInnerJoin_tMap_2 = false;

								tos_count_tMap_2++;

								/**
								 * [tMap_2 main ] stop
								 */

								// Start of branch "importtuteur"
								if (importtuteur != null) {

									/**
									 * [tMysqlOutput_2 main ] start
									 */

									currentComponent = "tMysqlOutput_2";

									whetherReject_tMysqlOutput_2 = false;

									pstmt_tMysqlOutput_2.setInt(1,
											importtuteur.id);

									java.sql.ResultSet rs_tMysqlOutput_2 = pstmt_tMysqlOutput_2
											.executeQuery();
									int checkCount_tMysqlOutput_2 = -1;
									while (rs_tMysqlOutput_2.next()) {
										checkCount_tMysqlOutput_2 = rs_tMysqlOutput_2
												.getInt(1);
									}
									if (checkCount_tMysqlOutput_2 > 0) {

										if (importtuteur.prenom == null) {
											pstmtUpdate_tMysqlOutput_2.setNull(
													1, java.sql.Types.VARCHAR);
										} else {
											pstmtUpdate_tMysqlOutput_2
													.setString(1,
															importtuteur.prenom);
										}

										if (importtuteur.adresse == null) {
											pstmtUpdate_tMysqlOutput_2.setNull(
													2, java.sql.Types.VARCHAR);
										} else {
											pstmtUpdate_tMysqlOutput_2
													.setString(
															2,
															importtuteur.adresse);
										}

										if (importtuteur.telephone == null) {
											pstmtUpdate_tMysqlOutput_2.setNull(
													3, java.sql.Types.VARCHAR);
										} else {
											pstmtUpdate_tMysqlOutput_2
													.setString(
															3,
															importtuteur.telephone);
										}

										if (importtuteur.organisation == null) {
											pstmtUpdate_tMysqlOutput_2.setNull(
													4, java.sql.Types.VARCHAR);
										} else {
											pstmtUpdate_tMysqlOutput_2
													.setString(
															4,
															importtuteur.organisation);
										}

										pstmtUpdate_tMysqlOutput_2.setInt(
												5 + count_tMysqlOutput_2,
												importtuteur.id);

										try {
											updatedCount_tMysqlOutput_2 = updatedCount_tMysqlOutput_2
													+ pstmtUpdate_tMysqlOutput_2
															.executeUpdate();
										} catch (java.lang.Exception e) {
											whetherReject_tMysqlOutput_2 = true;
											System.err.print(e.getMessage());
										}
									} else {

										pstmtInsert_tMysqlOutput_2.setInt(1,
												importtuteur.id);

										if (importtuteur.prenom == null) {
											pstmtInsert_tMysqlOutput_2.setNull(
													2, java.sql.Types.VARCHAR);
										} else {
											pstmtInsert_tMysqlOutput_2
													.setString(2,
															importtuteur.prenom);
										}

										if (importtuteur.adresse == null) {
											pstmtInsert_tMysqlOutput_2.setNull(
													3, java.sql.Types.VARCHAR);
										} else {
											pstmtInsert_tMysqlOutput_2
													.setString(
															3,
															importtuteur.adresse);
										}

										if (importtuteur.telephone == null) {
											pstmtInsert_tMysqlOutput_2.setNull(
													4, java.sql.Types.VARCHAR);
										} else {
											pstmtInsert_tMysqlOutput_2
													.setString(
															4,
															importtuteur.telephone);
										}

										if (importtuteur.organisation == null) {
											pstmtInsert_tMysqlOutput_2.setNull(
													5, java.sql.Types.VARCHAR);
										} else {
											pstmtInsert_tMysqlOutput_2
													.setString(
															5,
															importtuteur.organisation);
										}

										try {
											insertedCount_tMysqlOutput_2 = insertedCount_tMysqlOutput_2
													+ pstmtInsert_tMysqlOutput_2
															.executeUpdate();
										} catch (java.lang.Exception e) {
											whetherReject_tMysqlOutput_2 = true;
											System.err.print(e.getMessage());
										}
									}
									nb_line_tMysqlOutput_2++;

									commitCounter_tMysqlOutput_2++;

									if (commitEvery_tMysqlOutput_2 <= commitCounter_tMysqlOutput_2) {

										conn_tMysqlOutput_2.commit();

										commitCounter_tMysqlOutput_2 = 0;

									}

									tos_count_tMysqlOutput_2++;

									/**
									 * [tMysqlOutput_2 main ] stop
									 */

								} // End of branch "importtuteur"

							} // End of branch "row2"

							/**
							 * [tFileInputExcel_2 end ] start
							 */

							currentComponent = "tFileInputExcel_2";

						}

						globalMap.put("tFileInputExcel_2_NB_LINE",
								nb_line_tFileInputExcel_2);

					}

				} finally {

					if (!(source_tFileInputExcel_2 instanceof java.io.InputStream)) {
						workbook_tFileInputExcel_2.getPackage().revert();
					}

				}

				ok_Hash.put("tFileInputExcel_2", true);
				end_Hash.put("tFileInputExcel_2", System.currentTimeMillis());

				/**
				 * [tFileInputExcel_2 end ] stop
				 */

				/**
				 * [tMap_2 end ] start
				 */

				currentComponent = "tMap_2";

				// ###############################
				// # Lookup hashes releasing
				if (tHash_Lookup_row3 != null) {
					tHash_Lookup_row3.endGet();
				}
				globalMap.remove("tHash_Lookup_row3");

				// ###############################

				ok_Hash.put("tMap_2", true);
				end_Hash.put("tMap_2", System.currentTimeMillis());

				/**
				 * [tMap_2 end ] stop
				 */

				/**
				 * [tMysqlOutput_2 end ] start
				 */

				currentComponent = "tMysqlOutput_2";

				if (pstmtUpdate_tMysqlOutput_2 != null) {

					pstmtUpdate_tMysqlOutput_2.close();

				}
				if (pstmtInsert_tMysqlOutput_2 != null) {

					pstmtInsert_tMysqlOutput_2.close();

				}
				if (pstmt_tMysqlOutput_2 != null) {

					pstmt_tMysqlOutput_2.close();

				}

				conn_tMysqlOutput_2.commit();

				conn_tMysqlOutput_2.close();
				resourceMap.put("finish_tMysqlOutput_2", true);

				nb_line_deleted_tMysqlOutput_2 = nb_line_deleted_tMysqlOutput_2
						+ deletedCount_tMysqlOutput_2;
				nb_line_update_tMysqlOutput_2 = nb_line_update_tMysqlOutput_2
						+ updatedCount_tMysqlOutput_2;
				nb_line_inserted_tMysqlOutput_2 = nb_line_inserted_tMysqlOutput_2
						+ insertedCount_tMysqlOutput_2;
				nb_line_rejected_tMysqlOutput_2 = nb_line_rejected_tMysqlOutput_2
						+ rejectedCount_tMysqlOutput_2;
				globalMap.put("tMysqlOutput_2_NB_LINE", nb_line_tMysqlOutput_2);
				globalMap.put("tMysqlOutput_2_NB_LINE_UPDATED",
						nb_line_update_tMysqlOutput_2);
				globalMap.put("tMysqlOutput_2_NB_LINE_INSERTED",
						nb_line_inserted_tMysqlOutput_2);
				globalMap.put("tMysqlOutput_2_NB_LINE_DELETED",
						nb_line_deleted_tMysqlOutput_2);
				globalMap.put("tMysqlOutput_2_NB_LINE_REJECTED",
						nb_line_rejected_tMysqlOutput_2);

				ok_Hash.put("tMysqlOutput_2", true);
				end_Hash.put("tMysqlOutput_2", System.currentTimeMillis());

				/**
				 * [tMysqlOutput_2 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			// free memory for "tMap_2"
			globalMap.remove("tHash_Lookup_row3");

			try {

				/**
				 * [tFileInputExcel_2 finally ] start
				 */

				currentComponent = "tFileInputExcel_2";

				/**
				 * [tFileInputExcel_2 finally ] stop
				 */

				/**
				 * [tMap_2 finally ] start
				 */

				currentComponent = "tMap_2";

				/**
				 * [tMap_2 finally ] stop
				 */

				/**
				 * [tMysqlOutput_2 finally ] start
				 */

				currentComponent = "tMysqlOutput_2";

				if (resourceMap.get("finish_tMysqlOutput_2") == null) {
					if (resourceMap.get("conn_tMysqlOutput_2") != null) {
						try {
							((java.sql.Connection) resourceMap
									.get("conn_tMysqlOutput_2")).close();
						} catch (java.sql.SQLException sqlEx_tMysqlOutput_2) {
							System.out
									.println("failed to close the connection in tMysqlOutput_2 :"
											+ sqlEx_tMysqlOutput_2.getMessage());
						}
					}
				}

				/**
				 * [tMysqlOutput_2 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileInputExcel_2_SUBPROCESS_STATE", 1);
	}

	public static class row3Struct implements
			routines.system.IPersistableComparableLookupRow<row3Struct> {
		final static byte[] commonByteArrayLock_PROJETDEMO_importertuteur = new byte[0];
		static byte[] commonByteArray_PROJETDEMO_importertuteur = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public int id;

		public int getId() {
			return this.id;
		}

		public String username;

		public String getUsername() {
			return this.username;
		}

		public String username_canonical;

		public String getUsername_canonical() {
			return this.username_canonical;
		}

		public String email;

		public String getEmail() {
			return this.email;
		}

		public String email_canonical;

		public String getEmail_canonical() {
			return this.email_canonical;
		}

		public boolean enabled;

		public boolean getEnabled() {
			return this.enabled;
		}

		public String salt;

		public String getSalt() {
			return this.salt;
		}

		public String password;

		public String getPassword() {
			return this.password;
		}

		public java.util.Date last_login;

		public java.util.Date getLast_login() {
			return this.last_login;
		}

		public boolean locked;

		public boolean getLocked() {
			return this.locked;
		}

		public boolean expired;

		public boolean getExpired() {
			return this.expired;
		}

		public java.util.Date expires_at;

		public java.util.Date getExpires_at() {
			return this.expires_at;
		}

		public String confirmation_token;

		public String getConfirmation_token() {
			return this.confirmation_token;
		}

		public java.util.Date password_requested_at;

		public java.util.Date getPassword_requested_at() {
			return this.password_requested_at;
		}

		public String roles;

		public String getRoles() {
			return this.roles;
		}

		public boolean credentials_expired;

		public boolean getCredentials_expired() {
			return this.credentials_expired;
		}

		public java.util.Date credentials_expire_at;

		public java.util.Date getCredentials_expire_at() {
			return this.credentials_expire_at;
		}

		public String type;

		public String getType() {
			return this.type;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result
						+ ((this.email == null) ? 0 : this.email.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row3Struct other = (row3Struct) obj;

			if (this.email == null) {
				if (other.email != null)
					return false;

			} else if (!this.email.equals(other.email))

				return false;

			return true;
		}

		public void copyDataTo(row3Struct other) {

			other.id = this.id;
			other.username = this.username;
			other.username_canonical = this.username_canonical;
			other.email = this.email;
			other.email_canonical = this.email_canonical;
			other.enabled = this.enabled;
			other.salt = this.salt;
			other.password = this.password;
			other.last_login = this.last_login;
			other.locked = this.locked;
			other.expired = this.expired;
			other.expires_at = this.expires_at;
			other.confirmation_token = this.confirmation_token;
			other.password_requested_at = this.password_requested_at;
			other.roles = this.roles;
			other.credentials_expired = this.credentials_expired;
			other.credentials_expire_at = this.credentials_expire_at;
			other.type = this.type;

		}

		public void copyKeysDataTo(row3Struct other) {

			other.email = this.email;

		}

		private String readString(DataInputStream dis, ObjectInputStream ois)
				throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_PROJETDEMO_importertuteur.length) {
					if (length < 1024
							&& commonByteArray_PROJETDEMO_importertuteur.length == 0) {
						commonByteArray_PROJETDEMO_importertuteur = new byte[1024];
					} else {
						commonByteArray_PROJETDEMO_importertuteur = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_PROJETDEMO_importertuteur, 0,
						length);
				strReturn = new String(
						commonByteArray_PROJETDEMO_importertuteur, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(DataInputStream dis,
				ObjectInputStream ois) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_PROJETDEMO_importertuteur) {

				try {

					int length = 0;

					this.email = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.email, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.id = dis.readInt();

				this.username = readString(dis, ois);

				this.username_canonical = readString(dis, ois);

				this.email_canonical = readString(dis, ois);

				this.enabled = dis.readBoolean();

				this.salt = readString(dis, ois);

				this.password = readString(dis, ois);

				this.last_login = readDate(dis, ois);

				this.locked = dis.readBoolean();

				this.expired = dis.readBoolean();

				this.expires_at = readDate(dis, ois);

				this.confirmation_token = readString(dis, ois);

				this.password_requested_at = readDate(dis, ois);

				this.roles = readString(dis, ois);

				this.credentials_expired = dis.readBoolean();

				this.credentials_expire_at = readDate(dis, ois);

				this.type = readString(dis, ois);

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				dos.writeInt(this.id);

				writeString(this.username, dos, oos);

				writeString(this.username_canonical, dos, oos);

				writeString(this.email_canonical, dos, oos);

				dos.writeBoolean(this.enabled);

				writeString(this.salt, dos, oos);

				writeString(this.password, dos, oos);

				writeDate(this.last_login, dos, oos);

				dos.writeBoolean(this.locked);

				dos.writeBoolean(this.expired);

				writeDate(this.expires_at, dos, oos);

				writeString(this.confirmation_token, dos, oos);

				writeDate(this.password_requested_at, dos, oos);

				writeString(this.roles, dos, oos);

				dos.writeBoolean(this.credentials_expired);

				writeDate(this.credentials_expire_at, dos, oos);

				writeString(this.type, dos, oos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("id=" + String.valueOf(id));
			sb.append(",username=" + username);
			sb.append(",username_canonical=" + username_canonical);
			sb.append(",email=" + email);
			sb.append(",email_canonical=" + email_canonical);
			sb.append(",enabled=" + String.valueOf(enabled));
			sb.append(",salt=" + salt);
			sb.append(",password=" + password);
			sb.append(",last_login=" + String.valueOf(last_login));
			sb.append(",locked=" + String.valueOf(locked));
			sb.append(",expired=" + String.valueOf(expired));
			sb.append(",expires_at=" + String.valueOf(expires_at));
			sb.append(",confirmation_token=" + confirmation_token);
			sb.append(",password_requested_at="
					+ String.valueOf(password_requested_at));
			sb.append(",roles=" + roles);
			sb.append(",credentials_expired="
					+ String.valueOf(credentials_expired));
			sb.append(",credentials_expire_at="
					+ String.valueOf(credentials_expire_at));
			sb.append(",type=" + type);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row3Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.email, other.email);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tMysqlInput_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tMysqlInput_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row3Struct row3 = new row3Struct();

				/**
				 * [tAdvancedHash_row3 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row3", false);
				start_Hash
						.put("tAdvancedHash_row3", System.currentTimeMillis());

				currentComponent = "tAdvancedHash_row3";

				int tos_count_tAdvancedHash_row3 = 0;

				// connection name:row3
				// source node:tMysqlInput_1 - inputs:(after_tFileInputExcel_2)
				// outputs:(row3,row3) | target node:tAdvancedHash_row3 -
				// inputs:(row3) outputs:()
				// linked node: tMap_2 - inputs:(row2,row3)
				// outputs:(importtuteur)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row3 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row3Struct> tHash_Lookup_row3 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row3Struct> getLookup(matchingModeEnum_row3);

				globalMap.put("tHash_Lookup_row3", tHash_Lookup_row3);

				/**
				 * [tAdvancedHash_row3 begin ] stop
				 */

				/**
				 * [tMysqlInput_1 begin ] start
				 */

				ok_Hash.put("tMysqlInput_1", false);
				start_Hash.put("tMysqlInput_1", System.currentTimeMillis());

				currentComponent = "tMysqlInput_1";

				int tos_count_tMysqlInput_1 = 0;

				java.util.Calendar calendar_tMysqlInput_1 = java.util.Calendar
						.getInstance();
				calendar_tMysqlInput_1.set(0, 0, 0, 0, 0, 0);
				java.util.Date year0_tMysqlInput_1 = calendar_tMysqlInput_1
						.getTime();
				int nb_line_tMysqlInput_1 = 0;
				java.sql.Connection conn_tMysqlInput_1 = null;
				java.lang.Class.forName("org.gjt.mm.mysql.Driver");
				String dbUser_tMysqlInput_1 = "root";

				final String decryptedPassword_tMysqlInput_1 = routines.system.PasswordEncryptUtil
						.decryptPassword("7a440551249af37a");
				String dbPwd_tMysqlInput_1 = decryptedPassword_tMysqlInput_1;

				String url_tMysqlInput_1 = "jdbc:mysql://" + "localhost" + ":"
						+ "8889" + "/" + "galter" + "?"
						+ "noDatetimeStringSync=true";

				conn_tMysqlInput_1 = java.sql.DriverManager.getConnection(
						url_tMysqlInput_1, dbUser_tMysqlInput_1,
						dbPwd_tMysqlInput_1);

				java.sql.Statement stmt_tMysqlInput_1 = conn_tMysqlInput_1
						.createStatement();

				String dbquery_tMysqlInput_1 = "SELECT \n  `user`.`id`, \n  `user`.`username`, \n  `user`.`username_canonical`, \n  `user`.`email`, \n  `user`.`email_canonical`, \n  `user`.`enabled`, \n  `user`.`salt`, \n  `user`.`password`, \n  `user`.`last_login`, \n  `user`.`locked`, \n  `user`.`expired`, \n  `user`.`expires_at`, \n  `user`.`confirmation_token`, \n  `user`.`password_requested_at`, \n  `user`.`roles`, \n  `user`.`credentials_expired`, \n  `user`.`credentials_expire_at`, \n  `user`.`type`\nFROM `user`";

				globalMap.put("tMysqlInput_1_QUERY", dbquery_tMysqlInput_1);
				java.sql.ResultSet rs_tMysqlInput_1 = null;
				try {
					rs_tMysqlInput_1 = stmt_tMysqlInput_1
							.executeQuery(dbquery_tMysqlInput_1);
					java.sql.ResultSetMetaData rsmd_tMysqlInput_1 = rs_tMysqlInput_1
							.getMetaData();
					int colQtyInRs_tMysqlInput_1 = rsmd_tMysqlInput_1
							.getColumnCount();

					String tmpContent_tMysqlInput_1 = null;

					while (rs_tMysqlInput_1.next()) {
						nb_line_tMysqlInput_1++;

						if (colQtyInRs_tMysqlInput_1 < 1) {
							row3.id = 0;
						} else {

							if (rs_tMysqlInput_1.getObject(1) != null) {
								row3.id = rs_tMysqlInput_1.getInt(1);
							} else {

								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}

						if (colQtyInRs_tMysqlInput_1 < 2) {
							row3.username = null;
						} else {

							tmpContent_tMysqlInput_1 = rs_tMysqlInput_1
									.getString(2);
							if (tmpContent_tMysqlInput_1 != null) {
								row3.username = tmpContent_tMysqlInput_1;
							} else {
								row3.username = null;
							}
						}

						if (colQtyInRs_tMysqlInput_1 < 3) {
							row3.username_canonical = null;
						} else {

							tmpContent_tMysqlInput_1 = rs_tMysqlInput_1
									.getString(3);
							if (tmpContent_tMysqlInput_1 != null) {
								row3.username_canonical = tmpContent_tMysqlInput_1;
							} else {
								row3.username_canonical = null;
							}
						}

						if (colQtyInRs_tMysqlInput_1 < 4) {
							row3.email = null;
						} else {

							tmpContent_tMysqlInput_1 = rs_tMysqlInput_1
									.getString(4);
							if (tmpContent_tMysqlInput_1 != null) {
								row3.email = tmpContent_tMysqlInput_1;
							} else {
								row3.email = null;
							}
						}

						if (colQtyInRs_tMysqlInput_1 < 5) {
							row3.email_canonical = null;
						} else {

							tmpContent_tMysqlInput_1 = rs_tMysqlInput_1
									.getString(5);
							if (tmpContent_tMysqlInput_1 != null) {
								row3.email_canonical = tmpContent_tMysqlInput_1;
							} else {
								row3.email_canonical = null;
							}
						}

						if (colQtyInRs_tMysqlInput_1 < 6) {
							row3.enabled = false;
						} else {

							if (rs_tMysqlInput_1.getObject(6) != null) {
								row3.enabled = rs_tMysqlInput_1.getBoolean(6);
							} else {

								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}

						if (colQtyInRs_tMysqlInput_1 < 7) {
							row3.salt = null;
						} else {

							tmpContent_tMysqlInput_1 = rs_tMysqlInput_1
									.getString(7);
							if (tmpContent_tMysqlInput_1 != null) {
								row3.salt = tmpContent_tMysqlInput_1;
							} else {
								row3.salt = null;
							}
						}

						if (colQtyInRs_tMysqlInput_1 < 8) {
							row3.password = null;
						} else {

							tmpContent_tMysqlInput_1 = rs_tMysqlInput_1
									.getString(8);
							if (tmpContent_tMysqlInput_1 != null) {
								row3.password = tmpContent_tMysqlInput_1;
							} else {
								row3.password = null;
							}
						}

						if (colQtyInRs_tMysqlInput_1 < 9) {
							row3.last_login = null;
						} else {

							if (rs_tMysqlInput_1.getString(9) != null) {
								String dateString_tMysqlInput_1 = rs_tMysqlInput_1
										.getString(9);
								if (!("0000-00-00")
										.equals(dateString_tMysqlInput_1)
										&& !("0000-00-00 00:00:00")
												.equals(dateString_tMysqlInput_1)) {
									row3.last_login = rs_tMysqlInput_1
											.getTimestamp(9);
								} else {
									row3.last_login = (java.util.Date) year0_tMysqlInput_1
											.clone();
								}
							} else {
								row3.last_login = null;
							}
						}

						if (colQtyInRs_tMysqlInput_1 < 10) {
							row3.locked = false;
						} else {

							if (rs_tMysqlInput_1.getObject(10) != null) {
								row3.locked = rs_tMysqlInput_1.getBoolean(10);
							} else {

								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}

						if (colQtyInRs_tMysqlInput_1 < 11) {
							row3.expired = false;
						} else {

							if (rs_tMysqlInput_1.getObject(11) != null) {
								row3.expired = rs_tMysqlInput_1.getBoolean(11);
							} else {

								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}

						if (colQtyInRs_tMysqlInput_1 < 12) {
							row3.expires_at = null;
						} else {

							if (rs_tMysqlInput_1.getString(12) != null) {
								String dateString_tMysqlInput_1 = rs_tMysqlInput_1
										.getString(12);
								if (!("0000-00-00")
										.equals(dateString_tMysqlInput_1)
										&& !("0000-00-00 00:00:00")
												.equals(dateString_tMysqlInput_1)) {
									row3.expires_at = rs_tMysqlInput_1
											.getTimestamp(12);
								} else {
									row3.expires_at = (java.util.Date) year0_tMysqlInput_1
											.clone();
								}
							} else {
								row3.expires_at = null;
							}
						}

						if (colQtyInRs_tMysqlInput_1 < 13) {
							row3.confirmation_token = null;
						} else {

							tmpContent_tMysqlInput_1 = rs_tMysqlInput_1
									.getString(13);
							if (tmpContent_tMysqlInput_1 != null) {
								row3.confirmation_token = tmpContent_tMysqlInput_1;
							} else {
								row3.confirmation_token = null;
							}
						}

						if (colQtyInRs_tMysqlInput_1 < 14) {
							row3.password_requested_at = null;
						} else {

							if (rs_tMysqlInput_1.getString(14) != null) {
								String dateString_tMysqlInput_1 = rs_tMysqlInput_1
										.getString(14);
								if (!("0000-00-00")
										.equals(dateString_tMysqlInput_1)
										&& !("0000-00-00 00:00:00")
												.equals(dateString_tMysqlInput_1)) {
									row3.password_requested_at = rs_tMysqlInput_1
											.getTimestamp(14);
								} else {
									row3.password_requested_at = (java.util.Date) year0_tMysqlInput_1
											.clone();
								}
							} else {
								row3.password_requested_at = null;
							}
						}

						if (colQtyInRs_tMysqlInput_1 < 15) {
							row3.roles = null;
						} else {

							tmpContent_tMysqlInput_1 = rs_tMysqlInput_1
									.getString(15);
							if (tmpContent_tMysqlInput_1 != null) {
								row3.roles = tmpContent_tMysqlInput_1;
							} else {
								row3.roles = null;
							}
						}

						if (colQtyInRs_tMysqlInput_1 < 16) {
							row3.credentials_expired = false;
						} else {

							if (rs_tMysqlInput_1.getObject(16) != null) {
								row3.credentials_expired = rs_tMysqlInput_1
										.getBoolean(16);
							} else {

								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}

						if (colQtyInRs_tMysqlInput_1 < 17) {
							row3.credentials_expire_at = null;
						} else {

							if (rs_tMysqlInput_1.getString(17) != null) {
								String dateString_tMysqlInput_1 = rs_tMysqlInput_1
										.getString(17);
								if (!("0000-00-00")
										.equals(dateString_tMysqlInput_1)
										&& !("0000-00-00 00:00:00")
												.equals(dateString_tMysqlInput_1)) {
									row3.credentials_expire_at = rs_tMysqlInput_1
											.getTimestamp(17);
								} else {
									row3.credentials_expire_at = (java.util.Date) year0_tMysqlInput_1
											.clone();
								}
							} else {
								row3.credentials_expire_at = null;
							}
						}

						if (colQtyInRs_tMysqlInput_1 < 18) {
							row3.type = null;
						} else {

							tmpContent_tMysqlInput_1 = rs_tMysqlInput_1
									.getString(18);
							if (tmpContent_tMysqlInput_1 != null) {
								row3.type = tmpContent_tMysqlInput_1;
							} else {
								row3.type = null;
							}
						}

						/**
						 * [tMysqlInput_1 begin ] stop
						 */

						/**
						 * [tMysqlInput_1 main ] start
						 */

						currentComponent = "tMysqlInput_1";

						tos_count_tMysqlInput_1++;

						/**
						 * [tMysqlInput_1 main ] stop
						 */

						/**
						 * [tAdvancedHash_row3 main ] start
						 */

						currentComponent = "tAdvancedHash_row3";

						row3Struct row3_HashRow = new row3Struct();

						row3_HashRow.id = row3.id;

						row3_HashRow.username = row3.username;

						row3_HashRow.username_canonical = row3.username_canonical;

						row3_HashRow.email = row3.email;

						row3_HashRow.email_canonical = row3.email_canonical;

						row3_HashRow.enabled = row3.enabled;

						row3_HashRow.salt = row3.salt;

						row3_HashRow.password = row3.password;

						row3_HashRow.last_login = row3.last_login;

						row3_HashRow.locked = row3.locked;

						row3_HashRow.expired = row3.expired;

						row3_HashRow.expires_at = row3.expires_at;

						row3_HashRow.confirmation_token = row3.confirmation_token;

						row3_HashRow.password_requested_at = row3.password_requested_at;

						row3_HashRow.roles = row3.roles;

						row3_HashRow.credentials_expired = row3.credentials_expired;

						row3_HashRow.credentials_expire_at = row3.credentials_expire_at;

						row3_HashRow.type = row3.type;

						tHash_Lookup_row3.put(row3_HashRow);

						tos_count_tAdvancedHash_row3++;

						/**
						 * [tAdvancedHash_row3 main ] stop
						 */

						/**
						 * [tMysqlInput_1 end ] start
						 */

						currentComponent = "tMysqlInput_1";

					}
				} finally {
					if (rs_tMysqlInput_1 != null) {
						rs_tMysqlInput_1.close();
					}
					stmt_tMysqlInput_1.close();

					if (conn_tMysqlInput_1 != null
							&& !conn_tMysqlInput_1.isClosed()) {
						conn_tMysqlInput_1.close();
					}

				}
				globalMap.put("tMysqlInput_1_NB_LINE", nb_line_tMysqlInput_1);

				ok_Hash.put("tMysqlInput_1", true);
				end_Hash.put("tMysqlInput_1", System.currentTimeMillis());

				/**
				 * [tMysqlInput_1 end ] stop
				 */

				/**
				 * [tAdvancedHash_row3 end ] start
				 */

				currentComponent = "tAdvancedHash_row3";

				tHash_Lookup_row3.endPut();

				ok_Hash.put("tAdvancedHash_row3", true);
				end_Hash.put("tAdvancedHash_row3", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row3 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tMysqlInput_1 finally ] start
				 */

				currentComponent = "tMysqlInput_1";

				/**
				 * [tMysqlInput_1 finally ] stop
				 */

				/**
				 * [tAdvancedHash_row3 finally ] start
				 */

				currentComponent = "tAdvancedHash_row3";

				/**
				 * [tAdvancedHash_row3 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tMysqlInput_1_SUBPROCESS_STATE", 1);
	}

	public String resuming_logs_dir_path = null;
	public String resuming_checkpoint_path = null;
	public String parent_part_launcher = null;
	private String resumeEntryMethodName = null;
	private boolean globalResumeTicket = false;

	public boolean watch = false;
	// portStats is null, it means don't execute the statistics
	public Integer portStats = null;
	public int portTraces = 4334;
	public String clientHost;
	public String defaultClientHost = "localhost";
	public String contextStr = "Default";
	public boolean isDefaultContext = true;
	public String pid = "0";
	public String rootPid = null;
	public String fatherPid = null;
	public String fatherNode = null;
	public long startTime = 0;
	public boolean isChildJob = false;
	public String log4jLevel = "";

	private boolean execStat = true;

	private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
		protected java.util.Map<String, String> initialValue() {
			java.util.Map<String, String> threadRunResultMap = new java.util.HashMap<String, String>();
			threadRunResultMap.put("errorCode", null);
			threadRunResultMap.put("status", "");
			return threadRunResultMap;
		};
	};

	private java.util.Properties context_param = new java.util.Properties();
	public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

	public String status = "";

	public static void main(String[] args) {
		final importertuteur importertuteurClass = new importertuteur();

		int exitCode = importertuteurClass.runJobInTOS(args);

		System.exit(exitCode);
	}

	public String[][] runJob(String[] args) {

		int exitCode = runJobInTOS(args);
		String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

		return bufferValue;
	}

	public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;

		return hastBufferOutput;
	}

	public int runJobInTOS(String[] args) {
		// reset status
		status = "";

		String lastStr = "";
		for (String arg : args) {
			if (arg.equalsIgnoreCase("--context_param")) {
				lastStr = arg;
			} else if (lastStr.equals("")) {
				evalParam(arg);
			} else {
				evalParam(lastStr + " " + arg);
				lastStr = "";
			}
		}

		if (clientHost == null) {
			clientHost = defaultClientHost;
		}

		if (pid == null || "0".equals(pid)) {
			pid = TalendString.getAsciiRandomString(6);
		}

		if (rootPid == null) {
			rootPid = pid;
		}
		if (fatherPid == null) {
			fatherPid = pid;
		} else {
			isChildJob = true;
		}

		try {
			// call job/subjob with an existing context, like:
			// --context=production. if without this parameter, there will use
			// the default context instead.
			java.io.InputStream inContext = importertuteur.class
					.getClassLoader().getResourceAsStream(
							"projetdemo/importertuteur_0_1/contexts/"
									+ contextStr + ".properties");
			if (isDefaultContext && inContext == null) {

			} else {
				if (inContext != null) {
					// defaultProps is in order to keep the original context
					// value
					defaultProps.load(inContext);
					inContext.close();
					context = new ContextProperties(defaultProps);
				} else {
					// print info and job continue to run, for case:
					// context_param is not empty.
					System.err.println("Could not find the context "
							+ contextStr);
				}
			}

			if (!context_param.isEmpty()) {
				context.putAll(context_param);
			}
			context.source = (String) context.getProperty("source");
		} catch (java.io.IOException ie) {
			System.err.println("Could not load context " + contextStr);
			ie.printStackTrace();
		}

		// get context value from parent directly
		if (parentContextMap != null && !parentContextMap.isEmpty()) {
			if (parentContextMap.containsKey("source")) {
				context.source = (String) parentContextMap.get("source");
			}
		}

		// Resume: init the resumeUtil
		resumeEntryMethodName = ResumeUtil
				.getResumeEntryMethodName(resuming_checkpoint_path);
		resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
		resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName,
				jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
		// Resume: jobStart
		resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName,
				parent_part_launcher, Thread.currentThread().getId() + "", "",
				"", "", "",
				resumeUtil.convertToJsonText(context, parametersToEncrypt));

		java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
		globalMap.put("concurrentHashMap", concurrentHashMap);

		long startUsedMemory = Runtime.getRuntime().totalMemory()
				- Runtime.getRuntime().freeMemory();
		long endUsedMemory = 0;
		long end = 0;

		startTime = System.currentTimeMillis();

		this.globalResumeTicket = true;// to run tPreJob

		this.globalResumeTicket = false;// to run others jobs

		try {
			errorCode = null;
			tFileInputExcel_1Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tFileInputExcel_1) {
			globalMap.put("tFileInputExcel_1_SUBPROCESS_STATE", -1);

			e_tFileInputExcel_1.printStackTrace();

		}

		this.globalResumeTicket = true;// to run tPostJob

		end = System.currentTimeMillis();

		if (watch) {
			System.out.println((end - startTime) + " milliseconds");
		}

		endUsedMemory = Runtime.getRuntime().totalMemory()
				- Runtime.getRuntime().freeMemory();
		if (false) {
			System.out.println((endUsedMemory - startUsedMemory)
					+ " bytes memory increase when running : importertuteur");
		}

		int returnCode = 0;
		if (errorCode == null) {
			returnCode = status != null && status.equals("failure") ? 1 : 0;
		} else {
			returnCode = errorCode.intValue();
		}
		resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher,
				Thread.currentThread().getId() + "", "", "" + returnCode, "",
				"", "");

		return returnCode;

	}

	public void destroy() {
	}

	private java.util.Map<String, Object> getSharedConnections4REST() {
		java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();
		return connections;
	}

	private void evalParam(String arg) {
		if (arg.startsWith("--resuming_logs_dir_path")) {
			resuming_logs_dir_path = arg.substring(25);
		} else if (arg.startsWith("--resuming_checkpoint_path")) {
			resuming_checkpoint_path = arg.substring(27);
		} else if (arg.startsWith("--parent_part_launcher")) {
			parent_part_launcher = arg.substring(23);
		} else if (arg.startsWith("--watch")) {
			watch = true;
		} else if (arg.startsWith("--stat_port=")) {
			String portStatsStr = arg.substring(12);
			if (portStatsStr != null && !portStatsStr.equals("null")) {
				portStats = Integer.parseInt(portStatsStr);
			}
		} else if (arg.startsWith("--trace_port=")) {
			portTraces = Integer.parseInt(arg.substring(13));
		} else if (arg.startsWith("--client_host=")) {
			clientHost = arg.substring(14);
		} else if (arg.startsWith("--context=")) {
			contextStr = arg.substring(10);
			isDefaultContext = false;
		} else if (arg.startsWith("--father_pid=")) {
			fatherPid = arg.substring(13);
		} else if (arg.startsWith("--root_pid=")) {
			rootPid = arg.substring(11);
		} else if (arg.startsWith("--father_node=")) {
			fatherNode = arg.substring(14);
		} else if (arg.startsWith("--pid=")) {
			pid = arg.substring(6);
		} else if (arg.startsWith("--context_param")) {
			String keyValue = arg.substring(16);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.put(keyValue.substring(0, index),
							replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.put(keyValue.substring(0, index),
							keyValue.substring(index + 1));
				}
			}
		} else if (arg.startsWith("--log4jLevel=")) {
			log4jLevel = arg.substring(13);
		}

	}

	private final String[][] escapeChars = { { "\\\\", "\\" }, { "\\n", "\n" },
			{ "\\'", "\'" }, { "\\r", "\r" }, { "\\f", "\f" }, { "\\b", "\b" },
			{ "\\t", "\t" } };

	private String replaceEscapeChars(String keyValue) {
		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0], currIndex);
				if (index >= 0) {

					result.append(keyValue.substring(currIndex,
							index + strArray[0].length()).replace(strArray[0],
							strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left
			// into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
	}

	public Integer getErrorCode() {
		return errorCode;
	}

	public String getStatus() {
		return status;
	}

	ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 * 141664 characters generated by Talend Open Studio for Data Integration on the
 * 5 juillet 2015 15:57:54 CEST
 ************************************************************************************************/
